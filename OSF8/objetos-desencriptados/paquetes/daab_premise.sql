
CREATE OR REPLACE PACKAGE DAAB_PREMISE IS
   CURSOR CURECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE ) IS
SELECT AB_premise.*,AB_premise.rowid
		FROM AB_premise
		WHERE 
		    Premise_Id = inuPremise_Id;
   CURSOR CURECORDBYROWID( IRIROWID IN VARCHAR2 ) IS
SELECT AB_premise.*,AB_premise.rowid
		FROM AB_premise
		WHERE 
			rowId = irirowid;
   SUBTYPE STYAB_PREMISE IS CURECORD%ROWTYPE;
   TYPE TYREFCURSOR IS REF CURSOR;
   TYPE TYTBAB_PREMISE IS TABLE OF STYAB_PREMISE INDEX BY BINARY_INTEGER;
   TYPE TYRFRECORDS IS REF CURSOR
    RETURN STYAB_PREMISE;
   TYPE TYTBPREMISE_ID IS TABLE OF AB_PREMISE.PREMISE_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBBLOCK_ID IS TABLE OF AB_PREMISE.BLOCK_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBBLOCK_SIDE IS TABLE OF AB_PREMISE.BLOCK_SIDE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBPREMISE IS TABLE OF AB_PREMISE.PREMISE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBNUMBER_DIVISION IS TABLE OF AB_PREMISE.NUMBER_DIVISION%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBPREMISE_TYPE_ID IS TABLE OF AB_PREMISE.PREMISE_TYPE_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBSEGMENTS_ID IS TABLE OF AB_PREMISE.SEGMENTS_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBZIP_CODE_ID IS TABLE OF AB_PREMISE.ZIP_CODE_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBOWNER IS TABLE OF AB_PREMISE.OWNER%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBHOUSE_AMOUNT IS TABLE OF AB_PREMISE.HOUSE_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBROOMS_AMOUNT IS TABLE OF AB_PREMISE.ROOMS_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBFLOORS_AMOUNT IS TABLE OF AB_PREMISE.FLOORS_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBOFICCES_AMOUNT IS TABLE OF AB_PREMISE.OFICCES_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBBLOCKS_AMOUNT IS TABLE OF AB_PREMISE.BLOCKS_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBAPARTAMENTS_AMOUNT IS TABLE OF AB_PREMISE.APARTAMENTS_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBLOCALS_AMOUNT IS TABLE OF AB_PREMISE.LOCALS_AMOUNT%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBFLOOR_NUMBER IS TABLE OF AB_PREMISE.FLOOR_NUMBER%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBAPARTAMENT_NUMBER IS TABLE OF AB_PREMISE.APARTAMENT_NUMBER%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBSERVANTS_PASSAGE IS TABLE OF AB_PREMISE.SERVANTS_PASSAGE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBSETBACK_BUILDING IS TABLE OF AB_PREMISE.SETBACK_BUILDING%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBPREMISE_STATUS_ID IS TABLE OF AB_PREMISE.PREMISE_STATUS_ID%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBCATEGORY_ IS TABLE OF AB_PREMISE.CATEGORY_%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBSUBCATEGORY_ IS TABLE OF AB_PREMISE.SUBCATEGORY_%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBCONSECUTIVE IS TABLE OF AB_PREMISE.CONSECUTIVE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBSALEDATE IS TABLE OF AB_PREMISE.SALEDATE%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBCOOWNERSHIP_RATIO IS TABLE OF AB_PREMISE.COOWNERSHIP_RATIO%TYPE INDEX BY BINARY_INTEGER;
   TYPE TYTBROWID IS TABLE OF ROWID INDEX BY BINARY_INTEGER;
   TYPE TYRCAB_PREMISE IS RECORD
    (
      PREMISE_ID TYTBPREMISE_ID,
      BLOCK_ID TYTBBLOCK_ID,
      BLOCK_SIDE TYTBBLOCK_SIDE,
      PREMISE TYTBPREMISE,
      NUMBER_DIVISION TYTBNUMBER_DIVISION,
      PREMISE_TYPE_ID TYTBPREMISE_TYPE_ID,
      SEGMENTS_ID TYTBSEGMENTS_ID,
      ZIP_CODE_ID TYTBZIP_CODE_ID,
      OWNER TYTBOWNER,
      HOUSE_AMOUNT TYTBHOUSE_AMOUNT,
      ROOMS_AMOUNT TYTBROOMS_AMOUNT,
      FLOORS_AMOUNT TYTBFLOORS_AMOUNT,
      OFICCES_AMOUNT TYTBOFICCES_AMOUNT,
      BLOCKS_AMOUNT TYTBBLOCKS_AMOUNT,
      APARTAMENTS_AMOUNT TYTBAPARTAMENTS_AMOUNT,
      LOCALS_AMOUNT TYTBLOCALS_AMOUNT,
      FLOOR_NUMBER TYTBFLOOR_NUMBER,
      APARTAMENT_NUMBER TYTBAPARTAMENT_NUMBER,
      SERVANTS_PASSAGE TYTBSERVANTS_PASSAGE,
      SETBACK_BUILDING TYTBSETBACK_BUILDING,
      PREMISE_STATUS_ID TYTBPREMISE_STATUS_ID,
      CATEGORY_ TYTBCATEGORY_,
      SUBCATEGORY_ TYTBSUBCATEGORY_,
      CONSECUTIVE TYTBCONSECUTIVE,
      SALEDATE TYTBSALEDATE,
      COOWNERSHIP_RATIO TYTBCOOWNERSHIP_RATIO,
      ROW_ID TYTBROWID
    );
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   FUNCTION FSBGETMESSAGEDESCRIPTION
    RETURN VARCHAR2;
   PROCEDURE CLEARMEMORY;
   FUNCTION FBLEXIST( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN BOOLEAN;
   PROCEDURE ACCKEY( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE );
   PROCEDURE ACCKEYBYROWID( IRIROWID IN ROWID );
   PROCEDURE VALDUPLICATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE );
   PROCEDURE GETRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ORCRECORD OUT NOCOPY STYAB_PREMISE );
   FUNCTION FRCGETRCDATA( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN STYAB_PREMISE;
   FUNCTION FRCGETRCDATA
    RETURN STYAB_PREMISE;
   FUNCTION FRCGETRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN STYAB_PREMISE;
   PROCEDURE GETRECORDS( ISBQUERY IN VARCHAR2, OTBRESULT OUT NOCOPY TYTBAB_PREMISE );
   FUNCTION FRFGETRECORDS( ISBCRITERIA IN VARCHAR2 := NULL, IBLLOCK IN BOOLEAN := FALSE )
    RETURN TYREFCURSOR;
   PROCEDURE INSRECORD( IRCAB_PREMISE IN STYAB_PREMISE );
   PROCEDURE INSRECORD( IRCAB_PREMISE IN STYAB_PREMISE, ORIROWID OUT VARCHAR2 );
   PROCEDURE INSRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE );
   PROCEDURE DELRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INULOCK IN NUMBER := 1 );
   PROCEDURE DELBYROWID( IRIROWID IN ROWID, INULOCK IN NUMBER := 1 );
   PROCEDURE DELRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE, INULOCK IN NUMBER := 1 );
   PROCEDURE UPDRECORD( IRCAB_PREMISE IN STYAB_PREMISE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE, INULOCK IN NUMBER := 1 );
   PROCEDURE UPDBLOCK_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUBLOCK_ID$ IN AB_PREMISE.BLOCK_ID%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDBLOCK_SIDE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBBLOCK_SIDE$ IN AB_PREMISE.BLOCK_SIDE%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDPREMISE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE$ IN AB_PREMISE.PREMISE%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDNUMBER_DIVISION( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUNUMBER_DIVISION$ IN AB_PREMISE.NUMBER_DIVISION%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDPREMISE_TYPE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE_TYPE_ID$ IN AB_PREMISE.PREMISE_TYPE_ID%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDSEGMENTS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUSEGMENTS_ID$ IN AB_PREMISE.SEGMENTS_ID%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDZIP_CODE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUZIP_CODE_ID$ IN AB_PREMISE.ZIP_CODE_ID%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDOWNER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBOWNER$ IN AB_PREMISE.OWNER%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDHOUSE_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUHOUSE_AMOUNT$ IN AB_PREMISE.HOUSE_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDROOMS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUROOMS_AMOUNT$ IN AB_PREMISE.ROOMS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDFLOORS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUFLOORS_AMOUNT$ IN AB_PREMISE.FLOORS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDOFICCES_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUOFICCES_AMOUNT$ IN AB_PREMISE.OFICCES_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDBLOCKS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUBLOCKS_AMOUNT$ IN AB_PREMISE.BLOCKS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDAPARTAMENTS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUAPARTAMENTS_AMOUNT$ IN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDLOCALS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INULOCALS_AMOUNT$ IN AB_PREMISE.LOCALS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDFLOOR_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUFLOOR_NUMBER$ IN AB_PREMISE.FLOOR_NUMBER%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDAPARTAMENT_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBAPARTAMENT_NUMBER$ IN AB_PREMISE.APARTAMENT_NUMBER%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDSERVANTS_PASSAGE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBSERVANTS_PASSAGE$ IN AB_PREMISE.SERVANTS_PASSAGE%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDSETBACK_BUILDING( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBSETBACK_BUILDING$ IN AB_PREMISE.SETBACK_BUILDING%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDPREMISE_STATUS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE_STATUS_ID$ IN AB_PREMISE.PREMISE_STATUS_ID%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCATEGORY_$ IN AB_PREMISE.CATEGORY_%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDSUBCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUSUBCATEGORY_$ IN AB_PREMISE.SUBCATEGORY_%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDCONSECUTIVE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCONSECUTIVE$ IN AB_PREMISE.CONSECUTIVE%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDSALEDATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, IDTSALEDATE$ IN AB_PREMISE.SALEDATE%TYPE, INULOCK IN NUMBER := 0 );
   PROCEDURE UPDCOOWNERSHIP_RATIO( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCOOWNERSHIP_RATIO$ IN AB_PREMISE.COOWNERSHIP_RATIO%TYPE, INULOCK IN NUMBER := 0 );
   FUNCTION FNUGETPREMISE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_ID%TYPE;
   FUNCTION FNUGETBLOCK_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCK_ID%TYPE;
   FUNCTION FSBGETBLOCK_SIDE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCK_SIDE%TYPE;
   FUNCTION FNUGETPREMISE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE%TYPE;
   FUNCTION FNUGETNUMBER_DIVISION( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.NUMBER_DIVISION%TYPE;
   FUNCTION FNUGETPREMISE_TYPE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_TYPE_ID%TYPE;
   FUNCTION FNUGETSEGMENTS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SEGMENTS_ID%TYPE;
   FUNCTION FNUGETZIP_CODE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.ZIP_CODE_ID%TYPE;
   FUNCTION FSBGETOWNER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.OWNER%TYPE;
   FUNCTION FNUGETHOUSE_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.HOUSE_AMOUNT%TYPE;
   FUNCTION FNUGETROOMS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.ROOMS_AMOUNT%TYPE;
   FUNCTION FNUGETFLOORS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.FLOORS_AMOUNT%TYPE;
   FUNCTION FNUGETOFICCES_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.OFICCES_AMOUNT%TYPE;
   FUNCTION FNUGETBLOCKS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCKS_AMOUNT%TYPE;
   FUNCTION FNUGETAPARTAMENTS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE;
   FUNCTION FNUGETLOCALS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.LOCALS_AMOUNT%TYPE;
   FUNCTION FNUGETFLOOR_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.FLOOR_NUMBER%TYPE;
   FUNCTION FSBGETAPARTAMENT_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.APARTAMENT_NUMBER%TYPE;
   FUNCTION FSBGETSERVANTS_PASSAGE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SERVANTS_PASSAGE%TYPE;
   FUNCTION FSBGETSETBACK_BUILDING( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SETBACK_BUILDING%TYPE;
   FUNCTION FNUGETPREMISE_STATUS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_STATUS_ID%TYPE;
   FUNCTION FNUGETCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.CATEGORY_%TYPE;
   FUNCTION FNUGETSUBCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SUBCATEGORY_%TYPE;
   FUNCTION FNUGETCONSECUTIVE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.CONSECUTIVE%TYPE;
   FUNCTION FDTGETSALEDATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SALEDATE%TYPE;
   FUNCTION FNUGETCOOWNERSHIP_RATIO( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.COOWNERSHIP_RATIO%TYPE;
   PROCEDURE LOCKBYPK( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ORCAB_PREMISE OUT STYAB_PREMISE );
   PROCEDURE LOCKBYROWID( IRIROWID IN VARCHAR2, ORCAB_PREMISE OUT STYAB_PREMISE );
   PROCEDURE SETUSECACHE( IBLUSECACHE IN BOOLEAN );
END DAAB_PREMISE;
/


CREATE OR REPLACE PACKAGE BODY DAAB_PREMISE IS
   CNURECORD_NOT_EXIST CONSTANT NUMBER( 1 ) := 1;
   CNURECORD_ALREADY_EXIST CONSTANT NUMBER( 1 ) := 2;
   CNUAPPTABLEBUSSY CONSTANT NUMBER( 4 ) := 6951;
   CNUINS_PK_NULL CONSTANT NUMBER( 4 ) := 1682;
   CNURECORD_HAVE_CHILDREN CONSTANT NUMBER( 4 ) := -2292;
   CSBVERSION CONSTANT VARCHAR2( 20 ) := 'SAO183259';
   CSBTABLEPARAMETER CONSTANT VARCHAR2( 30 ) := 'AB_PREMISE';
   CNUGEENTITYID CONSTANT VARCHAR2( 30 ) := 5221;
   CURSOR CULOCKRCBYPK( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE ) IS
SELECT AB_premise.*,AB_premise.rowid 
		FROM AB_premise
		WHERE  Premise_Id = inuPremise_Id
		FOR UPDATE NOWAIT;
   CURSOR CULOCKRCBYROWID( IRIROWID IN VARCHAR2 ) IS
SELECT AB_premise.*,AB_premise.rowid 
		FROM AB_premise
		WHERE 
			rowId = irirowid
		FOR UPDATE NOWAIT;
   TYPE TYRFAB_PREMISE IS REF CURSOR;
   RCRECOFTAB TYRCAB_PREMISE;
   RCDATA CURECORD%ROWTYPE;
   BLDAO_USE_CACHE BOOLEAN := NULL;
   FUNCTION FSBGETMESSAGEDESCRIPTION
    RETURN VARCHAR2
    IS
      SBTABLEDESCRIPTION VARCHAR2( 32000 );
    BEGIN
      IF ( CNUGEENTITYID > 0 AND DAGE_ENTITY.FBLEXIST( CNUGEENTITYID ) ) THEN
         SBTABLEDESCRIPTION := DAGE_ENTITY.FSBGETDISPLAY_NAME( CNUGEENTITYID );
       ELSE
         SBTABLEDESCRIPTION := CSBTABLEPARAMETER;
      END IF;
      RETURN SBTABLEDESCRIPTION;
   END;
   PROCEDURE GETDAO_USE_CACHE
    IS
    BEGIN
      IF ( BLDAO_USE_CACHE IS NULL ) THEN
         BLDAO_USE_CACHE := GE_BOPARAMETER.FSBGET( 'DAO_USE_CACHE' ) = 'Y';
      END IF;
   END;
   FUNCTION FSBPRIMARYKEY( RCI IN STYAB_PREMISE := RCDATA )
    RETURN VARCHAR2
    IS
      SBPK VARCHAR2( 500 );
    BEGIN
      SBPK := '[';
      SBPK := SBPK || UT_CONVERT.FSBTOCHAR( RCI.PREMISE_ID );
      SBPK := SBPK || ']';
      RETURN SBPK;
   END;
   PROCEDURE LOCKBYPK( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ORCAB_PREMISE OUT STYAB_PREMISE )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      OPEN CULOCKRCBYPK( INUPREMISE_ID );
      FETCH CULOCKRCBYPK
         INTO ORCAB_PREMISE;
      IF CULOCKRCBYPK%NOTFOUND THEN
         CLOSE CULOCKRCBYPK;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYPK;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, FSBPRIMARYKEY( RCERROR ) || '|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYPK%ISOPEN THEN
            CLOSE CULOCKRCBYPK;
         END IF;
         RAISE;
   END;
   PROCEDURE LOCKBYROWID( IRIROWID IN VARCHAR2, ORCAB_PREMISE OUT STYAB_PREMISE )
    IS
    BEGIN
      OPEN CULOCKRCBYROWID( IRIROWID );
      FETCH CULOCKRCBYROWID
         INTO ORCAB_PREMISE;
      IF CULOCKRCBYROWID%NOTFOUND THEN
         CLOSE CULOCKRCBYROWID;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CULOCKRCBYROWID;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RESOURCE_BUSY THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         ERRORS.SETERROR( CNUAPPTABLEBUSSY, 'rowid=[' || IRIROWID || ']|' || FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF CULOCKRCBYROWID%ISOPEN THEN
            CLOSE CULOCKRCBYROWID;
         END IF;
         RAISE;
   END;
   PROCEDURE DELRECORDOFTABLES( ITBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE )
    IS
    BEGIN
      RCRECOFTAB.PREMISE_ID.DELETE;
      RCRECOFTAB.BLOCK_ID.DELETE;
      RCRECOFTAB.BLOCK_SIDE.DELETE;
      RCRECOFTAB.PREMISE.DELETE;
      RCRECOFTAB.NUMBER_DIVISION.DELETE;
      RCRECOFTAB.PREMISE_TYPE_ID.DELETE;
      RCRECOFTAB.SEGMENTS_ID.DELETE;
      RCRECOFTAB.ZIP_CODE_ID.DELETE;
      RCRECOFTAB.OWNER.DELETE;
      RCRECOFTAB.HOUSE_AMOUNT.DELETE;
      RCRECOFTAB.ROOMS_AMOUNT.DELETE;
      RCRECOFTAB.FLOORS_AMOUNT.DELETE;
      RCRECOFTAB.OFICCES_AMOUNT.DELETE;
      RCRECOFTAB.BLOCKS_AMOUNT.DELETE;
      RCRECOFTAB.APARTAMENTS_AMOUNT.DELETE;
      RCRECOFTAB.LOCALS_AMOUNT.DELETE;
      RCRECOFTAB.FLOOR_NUMBER.DELETE;
      RCRECOFTAB.APARTAMENT_NUMBER.DELETE;
      RCRECOFTAB.SERVANTS_PASSAGE.DELETE;
      RCRECOFTAB.SETBACK_BUILDING.DELETE;
      RCRECOFTAB.PREMISE_STATUS_ID.DELETE;
      RCRECOFTAB.CATEGORY_.DELETE;
      RCRECOFTAB.SUBCATEGORY_.DELETE;
      RCRECOFTAB.CONSECUTIVE.DELETE;
      RCRECOFTAB.SALEDATE.DELETE;
      RCRECOFTAB.COOWNERSHIP_RATIO.DELETE;
      RCRECOFTAB.ROW_ID.DELETE;
   END;
   PROCEDURE FILLRECORDOFTABLES( ITBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE, OBLUSEROWID OUT BOOLEAN )
    IS
    BEGIN
      DELRECORDOFTABLES( ITBAB_PREMISE );
      FOR N IN ITBAB_PREMISE.FIRST..ITBAB_PREMISE.LAST
       LOOP
         RCRECOFTAB.PREMISE_ID( N ) := ITBAB_PREMISE( N ).PREMISE_ID;
         RCRECOFTAB.BLOCK_ID( N ) := ITBAB_PREMISE( N ).BLOCK_ID;
         RCRECOFTAB.BLOCK_SIDE( N ) := ITBAB_PREMISE( N ).BLOCK_SIDE;
         RCRECOFTAB.PREMISE( N ) := ITBAB_PREMISE( N ).PREMISE;
         RCRECOFTAB.NUMBER_DIVISION( N ) := ITBAB_PREMISE( N ).NUMBER_DIVISION;
         RCRECOFTAB.PREMISE_TYPE_ID( N ) := ITBAB_PREMISE( N ).PREMISE_TYPE_ID;
         RCRECOFTAB.SEGMENTS_ID( N ) := ITBAB_PREMISE( N ).SEGMENTS_ID;
         RCRECOFTAB.ZIP_CODE_ID( N ) := ITBAB_PREMISE( N ).ZIP_CODE_ID;
         RCRECOFTAB.OWNER( N ) := ITBAB_PREMISE( N ).OWNER;
         RCRECOFTAB.HOUSE_AMOUNT( N ) := ITBAB_PREMISE( N ).HOUSE_AMOUNT;
         RCRECOFTAB.ROOMS_AMOUNT( N ) := ITBAB_PREMISE( N ).ROOMS_AMOUNT;
         RCRECOFTAB.FLOORS_AMOUNT( N ) := ITBAB_PREMISE( N ).FLOORS_AMOUNT;
         RCRECOFTAB.OFICCES_AMOUNT( N ) := ITBAB_PREMISE( N ).OFICCES_AMOUNT;
         RCRECOFTAB.BLOCKS_AMOUNT( N ) := ITBAB_PREMISE( N ).BLOCKS_AMOUNT;
         RCRECOFTAB.APARTAMENTS_AMOUNT( N ) := ITBAB_PREMISE( N ).APARTAMENTS_AMOUNT;
         RCRECOFTAB.LOCALS_AMOUNT( N ) := ITBAB_PREMISE( N ).LOCALS_AMOUNT;
         RCRECOFTAB.FLOOR_NUMBER( N ) := ITBAB_PREMISE( N ).FLOOR_NUMBER;
         RCRECOFTAB.APARTAMENT_NUMBER( N ) := ITBAB_PREMISE( N ).APARTAMENT_NUMBER;
         RCRECOFTAB.SERVANTS_PASSAGE( N ) := ITBAB_PREMISE( N ).SERVANTS_PASSAGE;
         RCRECOFTAB.SETBACK_BUILDING( N ) := ITBAB_PREMISE( N ).SETBACK_BUILDING;
         RCRECOFTAB.PREMISE_STATUS_ID( N ) := ITBAB_PREMISE( N ).PREMISE_STATUS_ID;
         RCRECOFTAB.CATEGORY_( N ) := ITBAB_PREMISE( N ).CATEGORY_;
         RCRECOFTAB.SUBCATEGORY_( N ) := ITBAB_PREMISE( N ).SUBCATEGORY_;
         RCRECOFTAB.CONSECUTIVE( N ) := ITBAB_PREMISE( N ).CONSECUTIVE;
         RCRECOFTAB.SALEDATE( N ) := ITBAB_PREMISE( N ).SALEDATE;
         RCRECOFTAB.COOWNERSHIP_RATIO( N ) := ITBAB_PREMISE( N ).COOWNERSHIP_RATIO;
         RCRECOFTAB.ROW_ID( N ) := ITBAB_PREMISE( N ).ROWID;
         OBLUSEROWID := RCRECOFTAB.ROW_ID( N ) IS NOT NULL;
      END LOOP;
   END;
   PROCEDURE LOAD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      IF CURECORD%ISOPEN THEN
         CLOSE CURECORD;
      END IF;
      OPEN CURECORD( INUPREMISE_ID );
      FETCH CURECORD
         INTO RCDATA;
      IF CURECORD%NOTFOUND THEN
         CLOSE CURECORD;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORD;
   END;
   PROCEDURE LOADBYROWID( IRIROWID IN VARCHAR2 )
    IS
      RCRECORDNULL CURECORDBYROWID%ROWTYPE;
    BEGIN
      IF CURECORDBYROWID%ISOPEN THEN
         CLOSE CURECORDBYROWID;
      END IF;
      OPEN CURECORDBYROWID( IRIROWID );
      FETCH CURECORDBYROWID
         INTO RCDATA;
      IF CURECORDBYROWID%NOTFOUND THEN
         CLOSE CURECORDBYROWID;
         RCDATA := RCRECORDNULL;
         RAISE NO_DATA_FOUND;
      END IF;
      CLOSE CURECORDBYROWID;
   END;
   FUNCTION FBLALREADYLOADED( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      IF ( INUPREMISE_ID = RCDATA.PREMISE_ID ) THEN
         RETURN ( TRUE );
      END IF;
      RETURN ( FALSE );
   END;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END;
   PROCEDURE CLEARMEMORY
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
    BEGIN
      RCDATA := RCRECORDNULL;
   END;
   FUNCTION FBLEXIST( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN BOOLEAN
    IS
    BEGIN
      LOAD( INUPREMISE_ID );
      RETURN ( TRUE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RETURN ( FALSE );
   END;
   PROCEDURE ACCKEY( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      LOAD( INUPREMISE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE ACCKEYBYROWID( IRIROWID IN ROWID )
    IS
    BEGIN
      LOADBYROWID( IRIROWID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE VALDUPLICATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    IS
    BEGIN
      LOAD( INUPREMISE_ID );
      ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY );
      RAISE EX.CONTROLLED_ERROR;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         NULL;
   END;
   PROCEDURE GETRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ORCRECORD OUT NOCOPY STYAB_PREMISE )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      LOAD( INUPREMISE_ID );
      ORCRECORD := RCDATA;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN STYAB_PREMISE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE )
    RETURN STYAB_PREMISE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRCGETRCDATA
    RETURN STYAB_PREMISE
    IS
    BEGIN
      RETURN ( RCDATA );
   END;
   PROCEDURE GETRECORDS( ISBQUERY IN VARCHAR2, OTBRESULT OUT NOCOPY TYTBAB_PREMISE )
    IS
      RFAB_PREMISE TYRFAB_PREMISE;
      N NUMBER( 4 ) := 1;
      SBFULLQUERY VARCHAR2( 32000 ) := 'SELECT 
		            AB_premise.Premise_Id,
		            AB_premise.Block_Id,
		            AB_premise.Block_Side,
		            AB_premise.Premise,
		            AB_premise.Number_Division,
		            AB_premise.Premise_Type_Id,
		            AB_premise.Segments_Id,
		            AB_premise.Zip_Code_Id,
		            AB_premise.Owner,
		            AB_premise.House_Amount,
		            AB_premise.Rooms_Amount,
		            AB_premise.Floors_Amount,
		            AB_premise.Oficces_Amount,
		            AB_premise.Blocks_Amount,
		            AB_premise.Apartaments_Amount,
		            AB_premise.Locals_Amount,
		            AB_premise.Floor_Number,
		            AB_premise.Apartament_Number,
		            AB_premise.Servants_Passage,
		            AB_premise.Setback_Building,
		            AB_premise.Premise_Status_Id,
		            AB_premise.Category_,
		            AB_premise.Subcategory_,
		            AB_premise.Consecutive,
		            AB_premise.Saledate,
		            AB_premise.Coownership_Ratio,
		            AB_premise.rowid
                FROM AB_premise';
      NUMAXTBRECORDS NUMBER( 5 ) := GE_BOPARAMETER.FNUGET( 'MAXREGSQUERY' );
    BEGIN
      OTBRESULT.DELETE;
      IF ISBQUERY IS NOT NULL AND LENGTH( ISBQUERY ) > 0 THEN
         SBFULLQUERY := SBFULLQUERY || ' WHERE ' || ISBQUERY;
      END IF;
      OPEN RFAB_PREMISE
           FOR SBFULLQUERY;
      FETCH RFAB_PREMISE
         BULK COLLECT INTO OTBRESULT;
      CLOSE RFAB_PREMISE;
      IF OTBRESULT.COUNT = 0 THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FRFGETRECORDS( ISBCRITERIA IN VARCHAR2 := NULL, IBLLOCK IN BOOLEAN := FALSE )
    RETURN TYREFCURSOR
    IS
      RFQUERY TYREFCURSOR;
      SBSQL VARCHAR2( 32000 ) := 'select 
		            AB_premise.Premise_Id,
		            AB_premise.Block_Id,
		            AB_premise.Block_Side,
		            AB_premise.Premise,
		            AB_premise.Number_Division,
		            AB_premise.Premise_Type_Id,
		            AB_premise.Segments_Id,
		            AB_premise.Zip_Code_Id,
		            AB_premise.Owner,
		            AB_premise.House_Amount,
		            AB_premise.Rooms_Amount,
		            AB_premise.Floors_Amount,
		            AB_premise.Oficces_Amount,
		            AB_premise.Blocks_Amount,
		            AB_premise.Apartaments_Amount,
		            AB_premise.Locals_Amount,
		            AB_premise.Floor_Number,
		            AB_premise.Apartament_Number,
		            AB_premise.Servants_Passage,
		            AB_premise.Setback_Building,
		            AB_premise.Premise_Status_Id,
		            AB_premise.Category_,
		            AB_premise.Subcategory_,
		            AB_premise.Consecutive,
		            AB_premise.Saledate,
		            AB_premise.Coownership_Ratio,
		            AB_premise.rowid
                FROM AB_premise';
    BEGIN
      IF ISBCRITERIA IS NOT NULL THEN
         SBSQL := SBSQL || ' where ' || ISBCRITERIA;
      END IF;
      IF IBLLOCK THEN
         SBSQL := SBSQL || ' for update nowait';
      END IF;
      OPEN RFQUERY
           FOR SBSQL;
      RETURN ( RFQUERY );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORD( IRCAB_PREMISE IN STYAB_PREMISE )
    IS
      RIROWID VARCHAR2( 200 );
    BEGIN
      INSRECORD( IRCAB_PREMISE, RIROWID );
   END;
   PROCEDURE INSRECORD( IRCAB_PREMISE IN STYAB_PREMISE, ORIROWID OUT VARCHAR2 )
    IS
    BEGIN
      IF IRCAB_PREMISE.PREMISE_ID IS NULL THEN
         ERRORS.SETERROR( CNUINS_PK_NULL, FSBGETMESSAGEDESCRIPTION || '|Premise_Id' );
         RAISE EX.CONTROLLED_ERROR;
      END IF;
      INSERT into AB_premise
		(
			Premise_Id,
			Block_Id,
			Block_Side,
			Premise,
			Number_Division,
			Premise_Type_Id,
			Segments_Id,
			Zip_Code_Id,
			Owner,
			House_Amount,
			Rooms_Amount,
			Floors_Amount,
			Oficces_Amount,
			Blocks_Amount,
			Apartaments_Amount,
			Locals_Amount,
			Floor_Number,
			Apartament_Number,
			Servants_Passage,
			Setback_Building,
			Premise_Status_Id,
			Category_,
			Subcategory_,
			Consecutive,
			Saledate,
			Coownership_Ratio
		)
		values
		(
			ircAB_premise.Premise_Id,
			ircAB_premise.Block_Id,
			ircAB_premise.Block_Side,
			ircAB_premise.Premise,
			ircAB_premise.Number_Division,
			ircAB_premise.Premise_Type_Id,
			ircAB_premise.Segments_Id,
			ircAB_premise.Zip_Code_Id,
			ircAB_premise.Owner,
			ircAB_premise.House_Amount,
			ircAB_premise.Rooms_Amount,
			ircAB_premise.Floors_Amount,
			ircAB_premise.Oficces_Amount,
			ircAB_premise.Blocks_Amount,
			ircAB_premise.Apartaments_Amount,
			ircAB_premise.Locals_Amount,
			ircAB_premise.Floor_Number,
			ircAB_premise.Apartament_Number,
			ircAB_premise.Servants_Passage,
			ircAB_premise.Setback_Building,
			ircAB_premise.Premise_Status_Id,
			ircAB_premise.Category_,
			ircAB_premise.Subcategory_,
			ircAB_premise.Consecutive,
			ircAB_premise.Saledate,
			ircAB_premise.Coownership_Ratio
		)
            returning
			rowid
		into
			orirowid;
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( IRCAB_PREMISE ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE INSRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE )
    IS
      BLUSEROWID BOOLEAN;
    BEGIN
      FILLRECORDOFTABLES( IOTBAB_PREMISE, BLUSEROWID );
      FORALL N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
         INSERT into AB_premise
			(
				Premise_Id,
				Block_Id,
				Block_Side,
				Premise,
				Number_Division,
				Premise_Type_Id,
				Segments_Id,
				Zip_Code_Id,
				Owner,
				House_Amount,
				Rooms_Amount,
				Floors_Amount,
				Oficces_Amount,
				Blocks_Amount,
				Apartaments_Amount,
				Locals_Amount,
				Floor_Number,
				Apartament_Number,
				Servants_Passage,
				Setback_Building,
				Premise_Status_Id,
				Category_,
				Subcategory_,
				Consecutive,
				Saledate,
				Coownership_Ratio
			)
			values
			(
				rcRecOfTab.Premise_Id(n),
				rcRecOfTab.Block_Id(n),
				rcRecOfTab.Block_Side(n),
				rcRecOfTab.Premise(n),
				rcRecOfTab.Number_Division(n),
				rcRecOfTab.Premise_Type_Id(n),
				rcRecOfTab.Segments_Id(n),
				rcRecOfTab.Zip_Code_Id(n),
				rcRecOfTab.Owner(n),
				rcRecOfTab.House_Amount(n),
				rcRecOfTab.Rooms_Amount(n),
				rcRecOfTab.Floors_Amount(n),
				rcRecOfTab.Oficces_Amount(n),
				rcRecOfTab.Blocks_Amount(n),
				rcRecOfTab.Apartaments_Amount(n),
				rcRecOfTab.Locals_Amount(n),
				rcRecOfTab.Floor_Number(n),
				rcRecOfTab.Apartament_Number(n),
				rcRecOfTab.Servants_Passage(n),
				rcRecOfTab.Setback_Building(n),
				rcRecOfTab.Premise_Status_Id(n),
				rcRecOfTab.Category_(n),
				rcRecOfTab.Subcategory_(n),
				rcRecOfTab.Consecutive(n),
				rcRecOfTab.Saledate(n),
				rcRecOfTab.Coownership_Ratio(n)
			);
    EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         ERRORS.SETERROR( CNURECORD_ALREADY_EXIST, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORD( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INULOCK IN NUMBER := 1 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      DELETE
		from AB_premise
		where
       		Premise_Id=inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELBYROWID( IRIROWID IN ROWID, INULOCK IN NUMBER := 1 )
    IS
      RCRECORDNULL CURECORD%ROWTYPE;
      RCERROR STYAB_PREMISE;
    BEGIN
      IF INULOCK = 1 THEN
         LOCKBYROWID( IRIROWID, RCDATA );
      END IF;
      DELETE
		from AB_premise
		where
			rowid = iriRowID
		returning
			Premise_Id
		into
			rcError.Premise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      IF RCDATA.ROWID = IRIROWID THEN
         RCDATA := RCRECORDNULL;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION || ' ' || ' rowid=[' || IRIROWID || ']' );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE DELRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYAB_PREMISE;
    BEGIN
      FILLRECORDOFTABLES( IOTBAB_PREMISE, BLUSEROWID );
      IF ( BLUSEROWID ) THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
            DELETE
				from AB_premise
				where
					rowid = rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.PREMISE_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
            DELETE
				from AB_premise
				where
		         	Premise_Id = rcRecOfTab.Premise_Id(n);
      END IF;
    EXCEPTION
      WHEN EX.RECORD_HAVE_CHILDREN THEN
         ERRORS.SETERROR( CNURECORD_HAVE_CHILDREN, FSBGETMESSAGEDESCRIPTION );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORD( IRCAB_PREMISE IN STYAB_PREMISE, INULOCK IN NUMBER := 0 )
    IS
      NUPREMISE_ID AB_PREMISE.PREMISE_ID%TYPE;
    BEGIN
      IF IRCAB_PREMISE.ROWID IS NOT NULL THEN
         IF INULOCK = 1 THEN
            LOCKBYROWID( IRCAB_PREMISE.ROWID, RCDATA );
         END IF;
         UPDATE AB_premise
			set
				Block_Id = ircAB_premise.Block_Id,
				Block_Side = ircAB_premise.Block_Side,
				Premise = ircAB_premise.Premise,
				Number_Division = ircAB_premise.Number_Division,
				Premise_Type_Id = ircAB_premise.Premise_Type_Id,
				Segments_Id = ircAB_premise.Segments_Id,
				Zip_Code_Id = ircAB_premise.Zip_Code_Id,
				Owner = ircAB_premise.Owner,
				House_Amount = ircAB_premise.House_Amount,
				Rooms_Amount = ircAB_premise.Rooms_Amount,
				Floors_Amount = ircAB_premise.Floors_Amount,
				Oficces_Amount = ircAB_premise.Oficces_Amount,
				Blocks_Amount = ircAB_premise.Blocks_Amount,
				Apartaments_Amount = ircAB_premise.Apartaments_Amount,
				Locals_Amount = ircAB_premise.Locals_Amount,
				Floor_Number = ircAB_premise.Floor_Number,
				Apartament_Number = ircAB_premise.Apartament_Number,
				Servants_Passage = ircAB_premise.Servants_Passage,
				Setback_Building = ircAB_premise.Setback_Building,
				Premise_Status_Id = ircAB_premise.Premise_Status_Id,
				Category_ = ircAB_premise.Category_,
				Subcategory_ = ircAB_premise.Subcategory_,
				Consecutive = ircAB_premise.Consecutive,
				Saledate = ircAB_premise.Saledate,
				Coownership_Ratio = ircAB_premise.Coownership_Ratio
			where
				rowid = ircAB_premise.rowid
			returning
				Premise_Id
			into
				nuPremise_Id;
       ELSE
         IF INULOCK = 1 THEN
            LOCKBYPK( IRCAB_PREMISE.PREMISE_ID, RCDATA );
         END IF;
         UPDATE AB_premise
			set
				Block_Id = ircAB_premise.Block_Id,
				Block_Side = ircAB_premise.Block_Side,
				Premise = ircAB_premise.Premise,
				Number_Division = ircAB_premise.Number_Division,
				Premise_Type_Id = ircAB_premise.Premise_Type_Id,
				Segments_Id = ircAB_premise.Segments_Id,
				Zip_Code_Id = ircAB_premise.Zip_Code_Id,
				Owner = ircAB_premise.Owner,
				House_Amount = ircAB_premise.House_Amount,
				Rooms_Amount = ircAB_premise.Rooms_Amount,
				Floors_Amount = ircAB_premise.Floors_Amount,
				Oficces_Amount = ircAB_premise.Oficces_Amount,
				Blocks_Amount = ircAB_premise.Blocks_Amount,
				Apartaments_Amount = ircAB_premise.Apartaments_Amount,
				Locals_Amount = ircAB_premise.Locals_Amount,
				Floor_Number = ircAB_premise.Floor_Number,
				Apartament_Number = ircAB_premise.Apartament_Number,
				Servants_Passage = ircAB_premise.Servants_Passage,
				Setback_Building = ircAB_premise.Setback_Building,
				Premise_Status_Id = ircAB_premise.Premise_Status_Id,
				Category_ = ircAB_premise.Category_,
				Subcategory_ = ircAB_premise.Subcategory_,
				Consecutive = ircAB_premise.Consecutive,
				Saledate = ircAB_premise.Saledate,
				Coownership_Ratio = ircAB_premise.Coownership_Ratio
			where
				Premise_Id = ircAB_premise.Premise_Id
			returning
				Premise_Id
			into
				nuPremise_Id;
      END IF;
      IF NUPREMISE_ID IS NULL THEN
         RAISE NO_DATA_FOUND;
      END IF;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || FSBPRIMARYKEY( IRCAB_PREMISE ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDRECORDS( IOTBAB_PREMISE IN OUT NOCOPY TYTBAB_PREMISE, INULOCK IN NUMBER := 1 )
    IS
      BLUSEROWID BOOLEAN;
      RCAUX STYAB_PREMISE;
    BEGIN
      FILLRECORDOFTABLES( IOTBAB_PREMISE, BLUSEROWID );
      IF BLUSEROWID THEN
         IF INULOCK = 1 THEN
            FOR N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
             LOOP
               LOCKBYROWID( RCRECOFTAB.ROW_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
            UPDATE AB_premise
				set
					Block_Id = rcRecOfTab.Block_Id(n),
					Block_Side = rcRecOfTab.Block_Side(n),
					Premise = rcRecOfTab.Premise(n),
					Number_Division = rcRecOfTab.Number_Division(n),
					Premise_Type_Id = rcRecOfTab.Premise_Type_Id(n),
					Segments_Id = rcRecOfTab.Segments_Id(n),
					Zip_Code_Id = rcRecOfTab.Zip_Code_Id(n),
					Owner = rcRecOfTab.Owner(n),
					House_Amount = rcRecOfTab.House_Amount(n),
					Rooms_Amount = rcRecOfTab.Rooms_Amount(n),
					Floors_Amount = rcRecOfTab.Floors_Amount(n),
					Oficces_Amount = rcRecOfTab.Oficces_Amount(n),
					Blocks_Amount = rcRecOfTab.Blocks_Amount(n),
					Apartaments_Amount = rcRecOfTab.Apartaments_Amount(n),
					Locals_Amount = rcRecOfTab.Locals_Amount(n),
					Floor_Number = rcRecOfTab.Floor_Number(n),
					Apartament_Number = rcRecOfTab.Apartament_Number(n),
					Servants_Passage = rcRecOfTab.Servants_Passage(n),
					Setback_Building = rcRecOfTab.Setback_Building(n),
					Premise_Status_Id = rcRecOfTab.Premise_Status_Id(n),
					Category_ = rcRecOfTab.Category_(n),
					Subcategory_ = rcRecOfTab.Subcategory_(n),
					Consecutive = rcRecOfTab.Consecutive(n),
					Saledate = rcRecOfTab.Saledate(n),
					Coownership_Ratio = rcRecOfTab.Coownership_Ratio(n)
				where
					rowid =  rcRecOfTab.row_id(n);
       ELSE
         IF INULOCK = 1 THEN
            FOR N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
             LOOP
               LOCKBYPK( RCRECOFTAB.PREMISE_ID( N ), RCAUX );
            END LOOP;
         END IF;
         FORALL N IN IOTBAB_PREMISE.FIRST..IOTBAB_PREMISE.LAST
            UPDATE AB_premise
				SET
					Block_Id = rcRecOfTab.Block_Id(n),
					Block_Side = rcRecOfTab.Block_Side(n),
					Premise = rcRecOfTab.Premise(n),
					Number_Division = rcRecOfTab.Number_Division(n),
					Premise_Type_Id = rcRecOfTab.Premise_Type_Id(n),
					Segments_Id = rcRecOfTab.Segments_Id(n),
					Zip_Code_Id = rcRecOfTab.Zip_Code_Id(n),
					Owner = rcRecOfTab.Owner(n),
					House_Amount = rcRecOfTab.House_Amount(n),
					Rooms_Amount = rcRecOfTab.Rooms_Amount(n),
					Floors_Amount = rcRecOfTab.Floors_Amount(n),
					Oficces_Amount = rcRecOfTab.Oficces_Amount(n),
					Blocks_Amount = rcRecOfTab.Blocks_Amount(n),
					Apartaments_Amount = rcRecOfTab.Apartaments_Amount(n),
					Locals_Amount = rcRecOfTab.Locals_Amount(n),
					Floor_Number = rcRecOfTab.Floor_Number(n),
					Apartament_Number = rcRecOfTab.Apartament_Number(n),
					Servants_Passage = rcRecOfTab.Servants_Passage(n),
					Setback_Building = rcRecOfTab.Setback_Building(n),
					Premise_Status_Id = rcRecOfTab.Premise_Status_Id(n),
					Category_ = rcRecOfTab.Category_(n),
					Subcategory_ = rcRecOfTab.Subcategory_(n),
					Consecutive = rcRecOfTab.Consecutive(n),
					Saledate = rcRecOfTab.Saledate(n),
					Coownership_Ratio = rcRecOfTab.Coownership_Ratio(n)
				where
					Premise_Id = rcRecOfTab.Premise_Id(n)
;
      END IF;
   END;
   PROCEDURE UPDBLOCK_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUBLOCK_ID$ IN AB_PREMISE.BLOCK_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Block_Id = inuBlock_Id$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.BLOCK_ID := INUBLOCK_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDBLOCK_SIDE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBBLOCK_SIDE$ IN AB_PREMISE.BLOCK_SIDE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Block_Side = isbBlock_Side$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.BLOCK_SIDE := ISBBLOCK_SIDE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPREMISE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE$ IN AB_PREMISE.PREMISE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Premise = inuPremise$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.PREMISE := INUPREMISE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDNUMBER_DIVISION( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUNUMBER_DIVISION$ IN AB_PREMISE.NUMBER_DIVISION%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Number_Division = inuNumber_Division$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.NUMBER_DIVISION := INUNUMBER_DIVISION$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPREMISE_TYPE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE_TYPE_ID$ IN AB_PREMISE.PREMISE_TYPE_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Premise_Type_Id = inuPremise_Type_Id$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.PREMISE_TYPE_ID := INUPREMISE_TYPE_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDSEGMENTS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUSEGMENTS_ID$ IN AB_PREMISE.SEGMENTS_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Segments_Id = inuSegments_Id$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SEGMENTS_ID := INUSEGMENTS_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDZIP_CODE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUZIP_CODE_ID$ IN AB_PREMISE.ZIP_CODE_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Zip_Code_Id = inuZip_Code_Id$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.ZIP_CODE_ID := INUZIP_CODE_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDOWNER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBOWNER$ IN AB_PREMISE.OWNER%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Owner = isbOwner$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.OWNER := ISBOWNER$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDHOUSE_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUHOUSE_AMOUNT$ IN AB_PREMISE.HOUSE_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			House_Amount = inuHouse_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.HOUSE_AMOUNT := INUHOUSE_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDROOMS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUROOMS_AMOUNT$ IN AB_PREMISE.ROOMS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Rooms_Amount = inuRooms_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.ROOMS_AMOUNT := INUROOMS_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDFLOORS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUFLOORS_AMOUNT$ IN AB_PREMISE.FLOORS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Floors_Amount = inuFloors_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.FLOORS_AMOUNT := INUFLOORS_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDOFICCES_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUOFICCES_AMOUNT$ IN AB_PREMISE.OFICCES_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Oficces_Amount = inuOficces_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.OFICCES_AMOUNT := INUOFICCES_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDBLOCKS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUBLOCKS_AMOUNT$ IN AB_PREMISE.BLOCKS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Blocks_Amount = inuBlocks_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.BLOCKS_AMOUNT := INUBLOCKS_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDAPARTAMENTS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUAPARTAMENTS_AMOUNT$ IN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Apartaments_Amount = inuApartaments_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.APARTAMENTS_AMOUNT := INUAPARTAMENTS_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDLOCALS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INULOCALS_AMOUNT$ IN AB_PREMISE.LOCALS_AMOUNT%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Locals_Amount = inuLocals_Amount$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.LOCALS_AMOUNT := INULOCALS_AMOUNT$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDFLOOR_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUFLOOR_NUMBER$ IN AB_PREMISE.FLOOR_NUMBER%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Floor_Number = inuFloor_Number$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.FLOOR_NUMBER := INUFLOOR_NUMBER$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDAPARTAMENT_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBAPARTAMENT_NUMBER$ IN AB_PREMISE.APARTAMENT_NUMBER%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Apartament_Number = isbApartament_Number$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.APARTAMENT_NUMBER := ISBAPARTAMENT_NUMBER$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDSERVANTS_PASSAGE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBSERVANTS_PASSAGE$ IN AB_PREMISE.SERVANTS_PASSAGE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Servants_Passage = isbServants_Passage$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SERVANTS_PASSAGE := ISBSERVANTS_PASSAGE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDSETBACK_BUILDING( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, ISBSETBACK_BUILDING$ IN AB_PREMISE.SETBACK_BUILDING%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Setback_Building = isbSetback_Building$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SETBACK_BUILDING := ISBSETBACK_BUILDING$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDPREMISE_STATUS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUPREMISE_STATUS_ID$ IN AB_PREMISE.PREMISE_STATUS_ID%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Premise_Status_Id = inuPremise_Status_Id$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.PREMISE_STATUS_ID := INUPREMISE_STATUS_ID$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCATEGORY_$ IN AB_PREMISE.CATEGORY_%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Category_ = inuCategory_$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.CATEGORY_ := INUCATEGORY_$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDSUBCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUSUBCATEGORY_$ IN AB_PREMISE.SUBCATEGORY_%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Subcategory_ = inuSubcategory_$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SUBCATEGORY_ := INUSUBCATEGORY_$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCONSECUTIVE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCONSECUTIVE$ IN AB_PREMISE.CONSECUTIVE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Consecutive = inuConsecutive$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.CONSECUTIVE := INUCONSECUTIVE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDSALEDATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, IDTSALEDATE$ IN AB_PREMISE.SALEDATE%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Saledate = idtSaledate$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.SALEDATE := IDTSALEDATE$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   PROCEDURE UPDCOOWNERSHIP_RATIO( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INUCOOWNERSHIP_RATIO$ IN AB_PREMISE.COOWNERSHIP_RATIO%TYPE, INULOCK IN NUMBER := 0 )
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF INULOCK = 1 THEN
         LOCKBYPK( INUPREMISE_ID, RCDATA );
      END IF;
      UPDATE AB_premise
		set
			Coownership_Ratio = inuCoownership_Ratio$
		where
			Premise_Id = inuPremise_Id;
      IF SQL%NOTFOUND THEN
         RAISE NO_DATA_FOUND;
      END IF;
      RCDATA.COOWNERSHIP_RATIO := INUCOOWNERSHIP_RATIO$;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
         RAISE EX.CONTROLLED_ERROR;
   END;
   FUNCTION FNUGETPREMISE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.PREMISE_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.PREMISE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETBLOCK_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCK_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.BLOCK_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.BLOCK_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETBLOCK_SIDE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCK_SIDE%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.BLOCK_SIDE );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.BLOCK_SIDE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETPREMISE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.PREMISE );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.PREMISE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETNUMBER_DIVISION( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.NUMBER_DIVISION%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.NUMBER_DIVISION );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.NUMBER_DIVISION );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETPREMISE_TYPE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_TYPE_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.PREMISE_TYPE_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.PREMISE_TYPE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETSEGMENTS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SEGMENTS_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.SEGMENTS_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.SEGMENTS_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETZIP_CODE_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.ZIP_CODE_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.ZIP_CODE_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.ZIP_CODE_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETOWNER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.OWNER%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.OWNER );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.OWNER );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETHOUSE_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.HOUSE_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.HOUSE_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.HOUSE_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETROOMS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.ROOMS_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.ROOMS_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.ROOMS_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETFLOORS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.FLOORS_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.FLOORS_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.FLOORS_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETOFICCES_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.OFICCES_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.OFICCES_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.OFICCES_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETBLOCKS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.BLOCKS_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.BLOCKS_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.BLOCKS_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETAPARTAMENTS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.APARTAMENTS_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.APARTAMENTS_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.APARTAMENTS_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETLOCALS_AMOUNT( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.LOCALS_AMOUNT%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.LOCALS_AMOUNT );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.LOCALS_AMOUNT );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETFLOOR_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.FLOOR_NUMBER%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.FLOOR_NUMBER );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.FLOOR_NUMBER );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETAPARTAMENT_NUMBER( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.APARTAMENT_NUMBER%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.APARTAMENT_NUMBER );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.APARTAMENT_NUMBER );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETSERVANTS_PASSAGE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SERVANTS_PASSAGE%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.SERVANTS_PASSAGE );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.SERVANTS_PASSAGE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FSBGETSETBACK_BUILDING( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SETBACK_BUILDING%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.SETBACK_BUILDING );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.SETBACK_BUILDING );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETPREMISE_STATUS_ID( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.PREMISE_STATUS_ID%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.PREMISE_STATUS_ID );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.PREMISE_STATUS_ID );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.CATEGORY_%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.CATEGORY_ );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.CATEGORY_ );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETSUBCATEGORY_( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SUBCATEGORY_%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.SUBCATEGORY_ );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.SUBCATEGORY_ );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETCONSECUTIVE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.CONSECUTIVE%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.CONSECUTIVE );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.CONSECUTIVE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FDTGETSALEDATE( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.SALEDATE%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.SALEDATE );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.SALEDATE );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   FUNCTION FNUGETCOOWNERSHIP_RATIO( INUPREMISE_ID IN AB_PREMISE.PREMISE_ID%TYPE, INURAISEERROR IN NUMBER := 1 )
    RETURN AB_PREMISE.COOWNERSHIP_RATIO%TYPE
    IS
      RCERROR STYAB_PREMISE;
    BEGIN
      RCERROR.PREMISE_ID := INUPREMISE_ID;
      IF BLDAO_USE_CACHE AND FBLALREADYLOADED( INUPREMISE_ID ) THEN
         RETURN ( RCDATA.COOWNERSHIP_RATIO );
      END IF;
      LOAD( INUPREMISE_ID );
      RETURN ( RCDATA.COOWNERSHIP_RATIO );
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         IF INURAISEERROR = 1 THEN
            ERRORS.SETERROR( CNURECORD_NOT_EXIST, FSBGETMESSAGEDESCRIPTION || ' ' || FSBPRIMARYKEY( RCERROR ) );
            RAISE EX.CONTROLLED_ERROR;
          ELSE
            RETURN NULL;
         END IF;
   END;
   PROCEDURE SETUSECACHE( IBLUSECACHE IN BOOLEAN )
    IS
    BEGIN
      BLDAO_USE_CACHE := IBLUSECACHE;
   END;
 BEGIN
   GETDAO_USE_CACHE;
END DAAB_PREMISE;
/


