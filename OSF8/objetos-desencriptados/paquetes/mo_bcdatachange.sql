
CREATE OR REPLACE PACKAGE MO_BCDATACHANGE IS
   CURSOR CUMOTIVEDATACHANGE( INUMOTIVEID IN MO_DATA_CHANGE.MOTIVE_ID%TYPE ) IS
SELECT  mo_data_change.entity_name,
            mo_data_change.entity_pk
    FROM    mo_data_change
    WHERE   mo_data_change.motive_id = inuMotiveId
    GROUP BY mo_data_change.entity_name, mo_data_change.entity_pk;
   CURSOR CUDATACHANGE( INUMOTIVEID IN MO_DATA_CHANGE.MOTIVE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, INUENTITYPK IN MO_DATA_CHANGE.ENTITY_PK%TYPE ) IS
SELECT  mo_data_change.entity_name,
            mo_data_change.attribute_name,
            mo_data_change.entity_attr_new_val,
            mo_data_change.entity_pk
    FROM    mo_data_change
    WHERE   mo_data_change.motive_id = inuMotiveId
    AND     mo_data_change.entity_name = isbEntityName
    AND     mo_data_change.entity_pk = inuEntityPk;
   CURSOR CUMOTENTATTRDATACHANGE( INUMOTIVEID IN MO_DATA_CHANGE.MOTIVE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, ISBATTRIBUTENAME IN MO_DATA_CHANGE.ATTRIBUTE_NAME%TYPE ) IS
SELECT
            MO_DATA_CHANGE.DATA_CHANGE_ID,
            MO_DATA_CHANGE.ENTITY_ATTR_NEW_VAL,
            MO_DATA_CHANGE.ENTITY_ATTR_OLD_VAL,
            MO_DATA_CHANGE.ENTITY_PK
    FROM    MO_DATA_CHANGE
    WHERE   MO_DATA_CHANGE.MOTIVE_ID = inuMotiveId
    AND     MO_DATA_CHANGE.ENTITY_NAME = isbEntityName
    AND     MO_DATA_CHANGE.ATTRIBUTE_NAME = isbAttributeName;
   CURSOR CUMOTENTATTRPKDATACHANGE( INUMOTIVEID IN MO_DATA_CHANGE.MOTIVE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, ISBATTRIBUTENAME IN MO_DATA_CHANGE.ATTRIBUTE_NAME%TYPE, ISBENTITYPKID IN MO_DATA_CHANGE.ENTITY_PK%TYPE ) IS
SELECT
            MO_DATA_CHANGE.DATA_CHANGE_ID,
            MO_DATA_CHANGE.ENTITY_ATTR_NEW_VAL,
            MO_DATA_CHANGE.ENTITY_ATTR_OLD_VAL
    FROM    MO_DATA_CHANGE
    WHERE   MO_DATA_CHANGE.MOTIVE_ID = inuMotiveId
    AND     MO_DATA_CHANGE.ENTITY_NAME = isbEntityName
    AND     MO_DATA_CHANGE.ATTRIBUTE_NAME = isbAttributeName
    AND     MO_DATA_CHANGE.ENTITY_PK = isbEntityPKId;
   FUNCTION FSBVERSION
    RETURN VARCHAR2;
   PROCEDURE UPDATEENTITY( ISBENTITYNAME IN VARCHAR2, ISBATTRNAME IN VARCHAR2, ISBATTRNEWVAL IN VARCHAR2, ISBNAMEPK IN VARCHAR2, ISBENTITYPK IN VARCHAR2, INUATTTYPEID IN NUMBER );
   FUNCTION FSBEXISTPACKANDVAL( INUCLIENTID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE, INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, ISBATTRIBUTENAME IN MO_DATA_CHANGE.ATTRIBUTE_NAME%TYPE, ISBVALUE IN MO_DATA_CHANGE.ENTITY_ATTR_NEW_VAL%TYPE )
    RETURN VARCHAR2;
   PROCEDURE INSERTENTITY( INUMOTIVE IN NUMBER, ISBENTITYNAME IN VARCHAR2, ISBENTITYPK IN VARCHAR2 );
   FUNCTION FSBEXISTPRIMARYKEY( ISBENTITYNAME IN VARCHAR2, ISBATTRPKNAME IN VARCHAR2, ISBVALUEPK IN VARCHAR2 )
    RETURN VARCHAR2;
END MO_BCDATACHANGE;
/


CREATE OR REPLACE PACKAGE BODY MO_BCDATACHANGE IS
   CSBVERSION CONSTANT VARCHAR2( 10 ) := 'SAO234018';
   CNUNUMBER CONSTANT GE_ATTRIBUTES_TYPE.ATTRIBUTE_TYPE_ID%TYPE := 1;
   CNUDATE CONSTANT GE_ATTRIBUTES_TYPE.ATTRIBUTE_TYPE_ID%TYPE := 3;
   FUNCTION FSBVERSION
    RETURN VARCHAR2
    IS
    BEGIN
      RETURN CSBVERSION;
   END FSBVERSION;
   PROCEDURE UPDATEENTITY( ISBENTITYNAME IN VARCHAR2, ISBATTRNAME IN VARCHAR2, ISBATTRNEWVAL IN VARCHAR2, ISBNAMEPK IN VARCHAR2, ISBENTITYPK IN VARCHAR2, INUATTTYPEID IN NUMBER )
    IS
      SBQUERY VARCHAR2( 4000 );
      NUATTR NUMBER;
      DTATTR DATE;
    BEGIN
      UT_TRACE.TRACE( 'Inicia MO_BCDataChange.UpdateEntity', 5 );
      UT_TRACE.TRACE( 'isbEntityName  ' || ISBENTITYNAME, 6 );
      UT_TRACE.TRACE( 'isbAttrName    ' || ISBATTRNAME, 6 );
      UT_TRACE.TRACE( 'isbAttrNewVal  ' || ISBATTRNEWVAL, 6 );
      UT_TRACE.TRACE( 'isbNamePK      ' || ISBNAMEPK, 6 );
      UT_TRACE.TRACE( 'isbEntityPK    ' || ISBENTITYPK, 6 );
      UT_TRACE.TRACE( 'inuAttTypeId ' || INUATTTYPEID, 6 );
      CASE INUATTTYPEID
         WHEN CNUNUMBER THEN
            NUATTR := TO_NUMBER( ISBATTRNEWVAL );
            SBQUERY := 'UPDATE ' || ISBENTITYNAME || ' SET ' || ISBATTRNAME || ' = ''' || NUATTR || ''' WHERE ' || ISBNAMEPK || ' = ''' || ISBENTITYPK || '''';
         WHEN CNUDATE THEN
            DTATTR := TO_DATE( ISBATTRNEWVAL );
            SBQUERY := 'UPDATE ' || ISBENTITYNAME || ' SET ' || ISBATTRNAME || ' = ''' || DTATTR || ''' WHERE ' || ISBNAMEPK || ' = ''' || ISBENTITYPK || '''';
         ELSE
            SBQUERY := 'UPDATE ' || ISBENTITYNAME || ' SET ' || ISBATTRNAME || ' = ''' || ISBATTRNEWVAL || ''' WHERE ' || ISBNAMEPK || ' = ''' || ISBENTITYPK || '''';
      END CASE;
      UT_TRACE.TRACE( 'sbQuery ' || SBQUERY, 8 );
      EXECUTE IMMEDIATE SBQUERY;
      UT_TRACE.TRACE( 'Finaliza MO_BCDataChange.UpdateEntity ', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END UPDATEENTITY;
   FUNCTION FSBEXISTPACKANDVAL( INUCLIENTID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE, INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, ISBATTRIBUTENAME IN MO_DATA_CHANGE.ATTRIBUTE_NAME%TYPE, ISBVALUE IN MO_DATA_CHANGE.ENTITY_ATTR_NEW_VAL%TYPE )
    RETURN VARCHAR2
    IS
      OSBEXISTPACKAGE VARCHAR2( 4 );
      NUDATACHANGEID MO_DATA_CHANGE.DATA_CHANGE_ID%TYPE;
      CURSOR CUREGPACKBYVAL( INUSUBSCRIBERID IN GE_SUBSCRIBER.SUBSCRIBER_ID%TYPE, INUPACKAGETYPEID IN PS_PACKAGE_TYPE.PACKAGE_TYPE_ID%TYPE, ISBENTITYNAME IN MO_DATA_CHANGE.ENTITY_NAME%TYPE, ISBATTRIBUTENAME IN MO_DATA_CHANGE.ATTRIBUTE_NAME%TYPE, ISBATTRNEWVAL IN MO_DATA_CHANGE.ENTITY_ATTR_NEW_VAL%TYPE ) IS
SELECT  /*+ use_nl(mo_data_change, mo_motive)
                        use_nl(mo_motive, ps_motive_status)
                        use_nl(mo_motive, mo_packages)
                        INDEX(mo_data_change PK_MO_DATA_CHANGE)
                        INDEX(mo_motive PK_MO_MOTIVE)
                        INDEX(ps_motive_status PK_PS_MOTIVE_STATUS)
                        INDEX(mo_packages PK_MO_PACKAGES)
                    */
                    mo_data_change.data_change_id
            FROM    mo_data_change,
                    mo_motive,
                    ps_motive_status,
                    mo_packages
            WHERE   mo_data_change.entity_name = isbEntityName
            AND     mo_data_change.attribute_name = isbAttributeName
            AND     mo_data_change.entity_attr_new_val = isbAttrNewVal
            AND     mo_motive.motive_id = mo_data_change.motive_id
            AND     ps_motive_status.motive_status_id = mo_motive.motive_status_id
            AND     ps_motive_status.Is_Final_Status = GE_BOConstants.csbNO
            AND     mo_packages.package_id = mo_motive.package_id
            AND     mo_packages.subscriber_id = inuSubscriberId
            AND     mo_packages.package_type_id = inuPackageTypeId;
    BEGIN
      UT_TRACE.TRACE( 'BEGIN MO_BCDataChange.fsbExistPackAndVal(' || INUCLIENTID || ',' || INUPACKAGETYPEID || ',' || ISBENTITYNAME || ',' || ISBATTRIBUTENAME || ',' || ISBVALUE || ')', 12 );
      OSBEXISTPACKAGE := '';
      DAGE_SUBSCRIBER.ACCKEY( INUCLIENTID );
      DAPS_PACKAGE_TYPE.ACCKEY( INUPACKAGETYPEID );
      OPEN CUREGPACKBYVAL( INUCLIENTID, INUPACKAGETYPEID, ISBENTITYNAME, ISBATTRIBUTENAME, ISBVALUE );
      FETCH CUREGPACKBYVAL
         INTO NUDATACHANGEID;
      IF CUREGPACKBYVAL%NOTFOUND THEN
         OSBEXISTPACKAGE := GE_BOCONSTANTS.CSBNO;
       ELSE
         OSBEXISTPACKAGE := GE_BOCONSTANTS.CSBYES;
      END IF;
      CLOSE CUREGPACKBYVAL;
      UT_TRACE.TRACE( 'END MO_BCDataChange.fsbExistPackAndVal=>' || OSBEXISTPACKAGE, 12 );
      RETURN OSBEXISTPACKAGE;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( CUREGPACKBYVAL%ISOPEN ) THEN
            CLOSE CUREGPACKBYVAL;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( CUREGPACKBYVAL%ISOPEN ) THEN
            CLOSE CUREGPACKBYVAL;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBEXISTPACKANDVAL;
   PROCEDURE INSERTENTITY( INUMOTIVE IN NUMBER, ISBENTITYNAME IN VARCHAR2, ISBENTITYPK IN VARCHAR2 )
    IS
      CRDATACHANGE MO_BCDATACHANGE.CUDATACHANGE%ROWTYPE;
      SBQUERY VARCHAR2( 1000 );
      SBATTRIBUTES VARCHAR2( 1000 ) := '';
      SBVALUES VARCHAR2( 1000 ) := '';
      NUATTRID NUMBER;
      NUATTRTYPEID NUMBER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia MO_BCDataChange.InsertEntity', 5 );
      OPEN MO_BCDATACHANGE.CUDATACHANGE( INUMOTIVE, ISBENTITYNAME, ISBENTITYPK );
      LOOP
         FETCH MO_BCDATACHANGE.CUDATACHANGE
            INTO CRDATACHANGE;
         EXIT WHEN MO_BCDATACHANGE.CUDATACHANGE%NOTFOUND;
         SBATTRIBUTES := SBATTRIBUTES || CRDATACHANGE.ATTRIBUTE_NAME || ', ';
         GE_BOENTITYATTRIBUTES.GETENTATTIDBYENTANDATTNAME( CRDATACHANGE.ENTITY_NAME, CRDATACHANGE.ATTRIBUTE_NAME, NUATTRID );
         NUATTRTYPEID := DAGE_ENTITY_ATTRIBUTES.FNUGETATTRIBUTE_TYPE_ID( NUATTRID );
         CASE NUATTRTYPEID
            WHEN CNUNUMBER THEN
               SBVALUES := SBVALUES || CRDATACHANGE.ENTITY_ATTR_NEW_VAL || ', ';
            WHEN CNUDATE THEN
               SBVALUES := SBVALUES || '''' || TO_DATE( CRDATACHANGE.ENTITY_ATTR_NEW_VAL ) || '''' || ', ';
            ELSE
               SBVALUES := SBVALUES || '''' || CRDATACHANGE.ENTITY_ATTR_NEW_VAL || '''' || ', ';
         END CASE;
      END LOOP;
      CLOSE MO_BCDATACHANGE.CUDATACHANGE;
      SBATTRIBUTES := SUBSTR( SBATTRIBUTES, 1, LENGTH( SBATTRIBUTES ) - 2 );
      SBVALUES := SUBSTR( SBVALUES, 1, LENGTH( SBVALUES ) - 2 );
      SBQUERY := 'INSERT INTO ' || ISBENTITYNAME || ' (' || SBATTRIBUTES || ') VALUES (' || SBVALUES || ')';
      UT_TRACE.TRACE( 'sbQuery: ' || SBQUERY, 8 );
      EXECUTE IMMEDIATE SBQUERY;
      UT_TRACE.TRACE( 'Finaliza MO_BCDataChange.InsertEntity', 5 );
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         IF ( MO_BCDATACHANGE.CUDATACHANGE%ISOPEN ) THEN
            CLOSE MO_BCDATACHANGE.CUDATACHANGE;
         END IF;
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         IF ( MO_BCDATACHANGE.CUDATACHANGE%ISOPEN ) THEN
            CLOSE MO_BCDATACHANGE.CUDATACHANGE;
         END IF;
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END INSERTENTITY;
   FUNCTION FSBEXISTPRIMARYKEY( ISBENTITYNAME IN VARCHAR2, ISBATTRPKNAME IN VARCHAR2, ISBVALUEPK IN VARCHAR2 )
    RETURN VARCHAR2
    IS
      SBQUERY VARCHAR2( 1000 );
      NUTOTAL NUMBER;
    BEGIN
      UT_TRACE.TRACE( 'Inicia MO_BCDataChange.fsbExistPrimaryKey', 5 );
      IF ( UT_CONVERT.IS_NUMBER( ISBVALUEPK ) ) THEN
         SBQUERY := 'SELECT COUNT(''x'')' || ' FROM ' || ISBENTITYNAME || ' WHERE ' || ISBATTRPKNAME || ' = ' || ISBVALUEPK;
       ELSE
         SBQUERY := 'SELECT COUNT(''x'')' || ' FROM ' || ISBENTITYNAME || ' WHERE ' || ISBATTRPKNAME || ' = ''' || ISBVALUEPK || '''';
      END IF;
      UT_TRACE.TRACE( 'sbString: ' || SBQUERY, 6 );
      EXECUTE IMMEDIATE SBQUERY
                        INTO NUTOTAL;
      UT_TRACE.TRACE( 'nuTotal ' || NUTOTAL, 6 );
      IF ( NUTOTAL != 0 ) THEN
         UT_TRACE.TRACE( 'Finaliza MO_BCDataChange.fsbExistPrimaryKey', 5 );
         RETURN 'Y';
       ELSE
         UT_TRACE.TRACE( 'Finaliza MO_BCDataChange.fsbExistPrimaryKey', 5 );
         RETURN 'N';
      END IF;
    EXCEPTION
      WHEN EX.CONTROLLED_ERROR THEN
         RAISE EX.CONTROLLED_ERROR;
      WHEN OTHERS THEN
         ERRORS.SETERROR;
         RAISE EX.CONTROLLED_ERROR;
   END FSBEXISTPRIMARYKEY;
END MO_BCDATACHANGE;
/


