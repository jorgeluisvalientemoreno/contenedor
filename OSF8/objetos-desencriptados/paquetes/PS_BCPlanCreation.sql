PACKAGE PS_BCPlanCreation
IS
    








































    
    
    

    
    
    

    
    
    
    
    
    TYPE TYRCWORKFLOW IS RECORD
    (
        NUWORKFLOWID        WF_FLOW.FLOW_ID%TYPE,                           
        SBTAGNAME           WF_FLOW.TAG_NAME%TYPE,                          
        NUATTRIEQUIVID      WF_ATTRIBUTES_EQUIV.ATTRIBUTES_EQUIV_ID%TYPE    
    );

    
    TYPE TYRCCAUSALSACTIVITY IS RECORD
    (
        NUCAUSALID      WF_CAUSAL_UNIT_TYPE.CAUSAL_ID%TYPE,                 
        SBALIAS         WF_CAUSAL_UNIT_TYPE.ALIAS%TYPE                      
    );
    TYPE TYTBCAUSALSACTIVITY IS TABLE OF TYRCCAUSALSACTIVITY INDEX BY BINARY_INTEGER;

    
    TYPE TYRCINSTANCE IS RECORD
    (
        NUINSTANCEID    WF_INSTANCE.INSTANCE_ID%TYPE,                       
        NUEXTERNALID    WF_INSTANCE.EXTERNAL_ID%TYPE,                       
        NUENTITYID      WF_INSTANCE.ENTITY_ID%TYPE                          
    );

    




    FUNCTION FSBVERSION
    RETURN   UT_DATATYPES.STYSAOVERSION;
    
    





    FUNCTION FSBGETSTATEMENT
    (
        INUINTERFACEID   IN   WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE
    )
    RETURN GE_STATEMENT.STATEMENT%TYPE;
    
    






    FUNCTION FNUGETFLOWBYPACKTYPE
    (
        INUINTERFACEID IN WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE,
        INUEXTERNALID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBSTATEMENT   IN GE_STATEMENT.STATEMENT%TYPE
    )
    RETURN TYRCWORKFLOW;
    
    






    FUNCTION FNUGETFLOWBYMOTIPACK
    (
        INUINTERFACEID IN WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE,
        INUEXTERNALID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBSTATEMENT   IN GE_STATEMENT.STATEMENT%TYPE
    )
    RETURN TYRCWORKFLOW;
    
    





    FUNCTION FBLEXISTFLOWTAGNAME
    (
        ISBTAGWORKFLOW     IN     WF_FLOW.TAG_NAME%TYPE
    )
    RETURN UT_DATATYPES.STYBOOLEAN;
    
    





    FUNCTION FXLGETFLOWBYTAGNAME
    (
        ISBTAGWORKFLOW     IN     WF_FLOW.TAG_NAME%TYPE
    )
    RETURN WF_FLOW.FLOW_XML%TYPE;
    
    





    FUNCTION FNUINSTANCEBYTAGNAME
    (
        ISBTAGNAME   IN     WF_INSTANCE.TAG_NAME%TYPE,
        INUPLANID    IN     WF_INSTANCE.PLAN_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE;
    
    





    FUNCTION FTBCAUSALSBYACTIVITY
    (
        ISBTAGNAME   IN   WF_CAUSALS_ACTIVITY.ACTIVITY_TAG_NAME%TYPE
    )
    RETURN TYTBCAUSALSACTIVITY;
    
    





    FUNCTION FRCGETINSTANCEBYPLAN
    (
        INUPLANID         IN      WF_INSTANCE.PLAN_ID%TYPE,
        INUNODETYPEID     IN      WF_INSTANCE.NODE_TYPE_ID%TYPE
    )
    RETURN TYRCINSTANCE;
    
    





    FUNCTION FNUGETPROCESSID
    (
        INUEXTERNALID     IN     WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID       IN     WF_INSTANCE.ENTITY_ID%TYPE
    )
    RETURN WF_ENTITY_PROCESS.PROCESS_ID%TYPE;
    
    





    PROCEDURE UPDINFOINSTANCE
    (
        INUINSTANCEID         IN     WF_INSTANCE.INSTANCE_ID%TYPE,
        INUPREVINSTANCEID     IN     WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUEXECUTIONID        IN     WF_INSTANCE.EXECUTION_ID%TYPE,
        INUSTATUSID           IN     WF_INSTANCE.STATUS_ID%TYPE
    );
    
    





    PROCEDURE GETENTITYANDEXTERNAL
    (
        INUINSTANCEID     IN             WF_INSTANCE.INSTANCE_ID%TYPE,
        OSBEXTERNALID     OUT NOCOPY     WF_INSTANCE.EXTERNAL_ID%TYPE,
        ONUENTITYID       OUT            WF_INSTANCE.ENTITY_ID%TYPE
    );
    
    





    PROCEDURE UPDINFOSUBPLAN
    (
        INUINSTANCEID        IN     WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBGEOMETRY          IN     WF_INSTANCE.GEOMETRY%TYPE,
        INUNODETYPE          IN     WF_INSTANCE.NODE_TYPE_ID%TYPE,
        ISBMULTIINSTANCE     IN     WF_INSTANCE.MULTI_INSTANCE%TYPE
    );
    
    





    FUNCTION FSBGETDESCNODECHILD
    (
        INUPARENTID        IN      WF_INSTANCE.PARENT_ID%TYPE,
        INUNODETYPEID      IN      WF_INSTANCE.NODE_TYPE_ID%TYPE
    )
    RETURN WF_INSTANCE.DESCRIPTION%TYPE;
    
    






    FUNCTION FNUINSTANCEBYPARENT
    (
        ISBTAGNAME     IN     WF_INSTANCE.TAG_NAME%TYPE,
        INUPARENTID    IN     WF_INSTANCE.PARENT_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE;
    
END PS_BCPLANCREATION;


PACKAGE BODY PS_BCPlanCreation
IS
    








































    
    
    
    CSBVERSION      CONSTANT UT_DATATYPES.STYSAOVERSION := 'SAO568006';

    
    
    
    
    











    FUNCTION FSBVERSION
    RETURN UT_DATATYPES.STYSAOVERSION
    IS
    BEGIN
        RETURN CSBVERSION;
    END FSBVERSION;

    

















    FUNCTION FSBGETSTATEMENT
    (
        INUINTERFACEID   IN   WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE
    )
    RETURN GE_STATEMENT.STATEMENT%TYPE
    IS
        NUSTATEMENTID       GE_STATEMENT.STATEMENT_ID%TYPE;
        SBSTATEMENT         GE_STATEMENT.STATEMENT%TYPE;
        CURSOR CUGETSTATEMENT
        IS
            SELECT  /*+
                        ORDERED
                        index (WF_INTERFACE_CONFIG PK_WF_INTERFACE_CONFIG)
                        index (GE_STATEMENT PK_GE_STATEMENT)
                    */
                    GE_STATEMENT.STATEMENT_ID,
                    GE_STATEMENT.STATEMENT
            FROM    /*+ PS_BCPlanCreation.fsbGetStatement.SAO497103 */
                    WF_INTERFACE_CONFIG,
                    GE_STATEMENT
            WHERE   WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID = INUINTERFACEID
            AND     WF_INTERFACE_CONFIG.STATEMENT_ID        = GE_STATEMENT.STATEMENT_ID;

    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fsbGetStatement', 10);

        
        OPEN  CUGETSTATEMENT;
        FETCH CUGETSTATEMENT INTO NUSTATEMENTID, SBSTATEMENT;
        CLOSE CUGETSTATEMENT;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fsbGetStatement'||CHR(10)||
                       'StatementId         ['||NUSTATEMENTID||']', 10);
        RETURN SBSTATEMENT;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fsbGetStatement', 5);
            IF(CUGETSTATEMENT%ISOPEN) THEN CLOSE CUGETSTATEMENT; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fsbGetStatement', 5);
            IF(CUGETSTATEMENT%ISOPEN) THEN CLOSE CUGETSTATEMENT; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETSTATEMENT;

    



























    FUNCTION FNUGETFLOWBYPACKTYPE
    (
        INUINTERFACEID IN WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE,
        INUEXTERNALID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBSTATEMENT   IN GE_STATEMENT.STATEMENT%TYPE
    )
    RETURN TYRCWORKFLOW
    IS
        CUEXECSTATEMENT     CONSTANTS.TYREFCURSOR;
        NUPACKAGETYPE       MO_PACKAGES.PACKAGE_ID%TYPE;
        RCWORKFLOW          TYRCWORKFLOW;
        
        
        CURSOR CUGETWORKFLOWNEWMODEL
        (
            INUPACKAGETYPEID   IN   MO_PACKAGES.PACKAGE_TYPE_ID%TYPE
        )
        IS
            SELECT  /*+
                        ORDERED
                        index (WF_ATTRIBUTES_EQUIV IX_WF_ATTRIBUTES_EQUIV02)
                        index (WF_FLOW UX_WF_FLOW01)
                    */
                    WF_FLOW.FLOW_ID,
                    WF_FLOW.TAG_NAME,
                    WF_ATTRIBUTES_EQUIV.ATTRIBUTES_EQUIV_ID
            FROM    /*+ PS_BCPlanCreation.fnuGetFlowByPackType.SAO497103 */
                    WF_ATTRIBUTES_EQUIV,
                    WF_FLOW
            WHERE   WF_ATTRIBUTES_EQUIV.INTERFACE_CONFIG_ID = INUINTERFACEID
            AND     WF_ATTRIBUTES_EQUIV.VALUE_1             = TO_CHAR(INUPACKAGETYPEID)
            AND     WF_FLOW.TAG_NAME                        = WF_ATTRIBUTES_EQUIV.FLOW_TAG_NAME;

        
        CURSOR CUGETWORKFLOWOLDMODEL
        (
            INUPACKAGETYPEID   IN   MO_PACKAGES.PACKAGE_TYPE_ID%TYPE
        )
        IS
            SELECT  /*+
                        ORDERED
                        index (WF_ATTRIBUTES_EQUIV IX_WF_ATTRIBUTES_EQUIV02)
                        index (WF_UNIT_TYPE PK_WF_UNIT_TYPE)
                    */
                    WF_UNIT_TYPE.UNIT_TYPE_ID FLOW_ID,
                    WF_UNIT_TYPE.TAG_NAME,
                    WF_ATTRIBUTES_EQUIV.ATTRIBUTES_EQUIV_ID
            FROM    /*+ PS_BCPlanCreation.fnuGetFlowByPackType.SAO497429 */
                    WF_ATTRIBUTES_EQUIV,
                    WF_UNIT_TYPE
            WHERE   WF_ATTRIBUTES_EQUIV.INTERFACE_CONFIG_ID = INUINTERFACEID
            AND     WF_ATTRIBUTES_EQUIV.VALUE_1             = TO_CHAR(INUPACKAGETYPEID)
            AND     WF_UNIT_TYPE.UNIT_TYPE_ID               = WF_ATTRIBUTES_EQUIV.UNIT_TYPE_ID;

    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fnuGetFlowByPackType [inuInterfaceId: '||INUINTERFACEID||']', 10);
        
        
        OPEN  CUEXECSTATEMENT FOR ISBSTATEMENT USING INUEXTERNALID;
        FETCH CUEXECSTATEMENT INTO NUPACKAGETYPE;
        CLOSE CUEXECSTATEMENT;
        
        UT_TRACE.TRACE('[nuPackageType:'||NUPACKAGETYPE||']', 10);
        
        
        OPEN  CUGETWORKFLOWNEWMODEL (NUPACKAGETYPE);
        FETCH CUGETWORKFLOWNEWMODEL INTO RCWORKFLOW;
        CLOSE CUGETWORKFLOWNEWMODEL;

        
        IF (RCWORKFLOW.NUWORKFLOWID IS NULL) THEN
        
            
            OPEN  CUGETWORKFLOWOLDMODEL (NUPACKAGETYPE);
            FETCH CUGETWORKFLOWOLDMODEL INTO RCWORKFLOW;
            CLOSE CUGETWORKFLOWOLDMODEL;
        
        END IF;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fnuGetFlowByPackType', 10);
        RETURN RCWORKFLOW;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fnuGetFlowByPackType', 5);
            IF(CUEXECSTATEMENT%ISOPEN)   THEN CLOSE CUEXECSTATEMENT;   END IF;
            IF(CUGETWORKFLOWNEWMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWNEWMODEL; END IF;
            IF(CUGETWORKFLOWOLDMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWOLDMODEL; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fnuGetFlowByPackType', 5);
            ERRORS.SETERROR;
            IF(CUEXECSTATEMENT%ISOPEN)   THEN CLOSE CUEXECSTATEMENT;   END IF;
            IF(CUGETWORKFLOWNEWMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWNEWMODEL; END IF;
            IF(CUGETWORKFLOWOLDMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWOLDMODEL; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETFLOWBYPACKTYPE;

    



























    FUNCTION FNUGETFLOWBYMOTIPACK
    (
        INUINTERFACEID IN WF_INTERFACE_CONFIG.INTERFACE_CONFIG_ID%TYPE,
        INUEXTERNALID  IN WF_INSTANCE.EXTERNAL_ID%TYPE,
        ISBSTATEMENT   IN GE_STATEMENT.STATEMENT%TYPE
    )
    RETURN TYRCWORKFLOW
    IS
        CUEXECSTATEMENT     CONSTANTS.TYREFCURSOR;
        NUPACKAGETYPE       MO_PACKAGES.PACKAGE_ID%TYPE;
        NUPRODMOTIVEID      MO_MOTIVE.PRODUCT_MOTIVE_ID%TYPE;
        RCWORKFLOW          TYRCWORKFLOW;
        
        
        CURSOR CUGETWORKFLOWNEWMODEL
        (
            INUPRODMOTIVEID    IN   MO_MOTIVE.MOTIVE_ID%TYPE,
            INUPACKAGETYPEID   IN   MO_PACKAGES.PACKAGE_TYPE_ID%TYPE
        )
        IS
            SELECT  /*+
                        ORDERED
                        index (WF_ATTRIBUTES_EQUIV IX_WF_ATTRIBUTES_EQUIV02)
                        index (WF_FLOW UX_WF_FLOW01)
                    */
                    WF_FLOW.FLOW_ID,
                    WF_FLOW.TAG_NAME,
                    WF_ATTRIBUTES_EQUIV.ATTRIBUTES_EQUIV_ID
            FROM    /*+ PS_BCPlanCreation.fnuGetFlowByMotiPack.SAO497103 */
                    WF_ATTRIBUTES_EQUIV,
                    WF_FLOW
            WHERE   WF_ATTRIBUTES_EQUIV.INTERFACE_CONFIG_ID = INUINTERFACEID
            AND     WF_ATTRIBUTES_EQUIV.VALUE_1             = TO_CHAR(INUPRODMOTIVEID)
            AND     WF_ATTRIBUTES_EQUIV.VALUE_2             = TO_CHAR(INUPACKAGETYPEID)
            AND     WF_FLOW.TAG_NAME                        = WF_ATTRIBUTES_EQUIV.FLOW_TAG_NAME;
            
        
        CURSOR CUGETWORKFLOWOLDMODEL
        (
            INUPRODMOTIVEID    IN   MO_MOTIVE.MOTIVE_ID%TYPE,
            INUPACKAGETYPEID   IN   MO_PACKAGES.PACKAGE_TYPE_ID%TYPE
        )
        IS
            SELECT  /*+
                        ORDERED
                        index (WF_ATTRIBUTES_EQUIV IX_WF_ATTRIBUTES_EQUIV02)
                        index (WF_UNIT_TYPE PK_WF_UNIT_TYPE)
                    */
                    WF_UNIT_TYPE.UNIT_TYPE_ID FLOW_ID,
                    WF_UNIT_TYPE.TAG_NAME,
                    WF_ATTRIBUTES_EQUIV.ATTRIBUTES_EQUIV_ID
            FROM    /*+ PS_BCPlanCreation.fnuGetFlowByMotiPack.SAO497429 */
                    WF_ATTRIBUTES_EQUIV,
                    WF_UNIT_TYPE
            WHERE   WF_ATTRIBUTES_EQUIV.INTERFACE_CONFIG_ID = INUINTERFACEID
            AND     WF_ATTRIBUTES_EQUIV.VALUE_1             = TO_CHAR(INUPRODMOTIVEID)
            AND     WF_ATTRIBUTES_EQUIV.VALUE_2             = TO_CHAR(INUPACKAGETYPEID)
            AND     WF_UNIT_TYPE.UNIT_TYPE_ID               = WF_ATTRIBUTES_EQUIV.UNIT_TYPE_ID;

    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fnuGetFlowByMotiPack [inuInterfaceId:'||INUINTERFACEID||']', 10);

        
        OPEN  CUEXECSTATEMENT FOR ISBSTATEMENT USING INUEXTERNALID;
        FETCH CUEXECSTATEMENT INTO NUPRODMOTIVEID, NUPACKAGETYPE;
        CLOSE CUEXECSTATEMENT;
        
        UT_TRACE.TRACE('[nuProdMotiveId:'||NUPRODMOTIVEID||'] [nuPackageType:'||NUPACKAGETYPE||']', 10);

        
        OPEN  CUGETWORKFLOWNEWMODEL (NUPRODMOTIVEID, NUPACKAGETYPE);
        FETCH CUGETWORKFLOWNEWMODEL INTO RCWORKFLOW;
        CLOSE CUGETWORKFLOWNEWMODEL;

        
        IF (RCWORKFLOW.NUWORKFLOWID IS NULL) THEN

            
            OPEN  CUGETWORKFLOWOLDMODEL (NUPRODMOTIVEID, NUPACKAGETYPE);
            FETCH CUGETWORKFLOWOLDMODEL INTO RCWORKFLOW;
            CLOSE CUGETWORKFLOWOLDMODEL;

        END IF;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fnuGetFlowByMotiPack', 10);
        RETURN RCWORKFLOW;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fnuGetFlowByMotiPack', 5);
            IF(CUEXECSTATEMENT%ISOPEN)   THEN CLOSE CUEXECSTATEMENT;   END IF;
            IF(CUGETWORKFLOWNEWMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWNEWMODEL; END IF;
            IF(CUGETWORKFLOWOLDMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWOLDMODEL; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fnuGetFlowByMotiPack', 5);
            ERRORS.SETERROR;
            IF(CUEXECSTATEMENT%ISOPEN)   THEN CLOSE CUEXECSTATEMENT;   END IF;
            IF(CUGETWORKFLOWNEWMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWNEWMODEL; END IF;
            IF(CUGETWORKFLOWOLDMODEL%ISOPEN) THEN CLOSE CUGETWORKFLOWOLDMODEL; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETFLOWBYMOTIPACK;

    


















    FUNCTION FBLEXISTFLOWTAGNAME
    (
        ISBTAGWORKFLOW     IN     WF_FLOW.TAG_NAME%TYPE
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        SBEXIST     UT_DATATYPES.STYMINVARCHAR;
        CURSOR CUEXISTWORKFLOW
        IS
            SELECT  /*+ index(WF_FLOW UX_WF_FLOW01) */
                    1
            FROM    /*+ PS_BCPlanCreation.fblExistFlowTagName.SAO497103 */
                    WF_FLOW
            WHERE   WF_FLOW.TAG_NAME = ISBTAGWORKFLOW;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fblExistFlowTagName'||CHR(10)||
                       'TagWorkflow ['||ISBTAGWORKFLOW||']', 10);

        
        OPEN  CUEXISTWORKFLOW;
        FETCH CUEXISTWORKFLOW INTO SBEXIST;
        CLOSE CUEXISTWORKFLOW;

        IF (SBEXIST IS NULL) THEN
            UT_TRACE.TRACE('END PS_BCPlanCreation.fblExistFlowTagName [FALSE]', 10);
            RETURN GE_BOCONSTANTS.GETFALSE;
        ELSE
            UT_TRACE.TRACE('END PS_BCPlanCreation.fblExistFlowTagName [TRUE]', 10);
            RETURN GE_BOCONSTANTS.GETTRUE;
        END IF;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fblExistFlowTagName', 5);
            IF(CUEXISTWORKFLOW%ISOPEN) THEN CLOSE CUEXISTWORKFLOW; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fblExistFlowTagName', 5);
            ERRORS.SETERROR;
            IF(CUEXISTWORKFLOW%ISOPEN) THEN CLOSE CUEXISTWORKFLOW; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FBLEXISTFLOWTAGNAME;

    

















    FUNCTION FXLGETFLOWBYTAGNAME
    (
        ISBTAGWORKFLOW     IN     WF_FLOW.TAG_NAME%TYPE
    )
    RETURN WF_FLOW.FLOW_XML%TYPE
    IS
        XLFLOW      WF_FLOW.FLOW_XML%TYPE;
        CURSOR CUGETFLOWXML
        IS
            SELECT  /*+ index(WF_FLOW UX_WF_FLOW01) */
                    WF_FLOW.FLOW_XML
            FROM    /*+ PS_BCPlanCreation.fxlGetFlowByTagName.SAO497103 */
                    WF_FLOW
            WHERE   WF_FLOW.TAG_NAME = ISBTAGWORKFLOW;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fblExistFlowTagName', 10);
        
        
        OPEN  CUGETFLOWXML;
        FETCH CUGETFLOWXML INTO XLFLOW;
        CLOSE CUGETFLOWXML;
        
        UT_TRACE.TRACE('END PS_BCPlanCreation.fxlGetFlowByTagName', 10);
        RETURN XLFLOW;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fxlGetFlowByTagName', 5);
            IF(CUGETFLOWXML%ISOPEN) THEN CLOSE CUGETFLOWXML; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fxlGetFlowByTagName', 5);
            ERRORS.SETERROR;
            IF(CUGETFLOWXML%ISOPEN) THEN CLOSE CUGETFLOWXML; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FXLGETFLOWBYTAGNAME;

    



















    FUNCTION FNUINSTANCEBYTAGNAME
    (
        ISBTAGNAME   IN     WF_INSTANCE.TAG_NAME%TYPE,
        INUPLANID    IN     WF_INSTANCE.PLAN_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE
    IS
        NUINSTANCEID   WF_INSTANCE.INSTANCE_ID%TYPE;

        CURSOR CUGETINSTANCEID
        IS
            SELECT  /*+ index(WF_INSTANCE IDX_WF_INSTANCE29) */
                    WF_INSTANCE.INSTANCE_ID
            FROM    /*+ PS_BCPlanCreation.fnuInstanceByTagName.SAO500323 */
                    WF_INSTANCE
            WHERE   WF_INSTANCE.TAG_NAME = ISBTAGNAME
            AND     WF_INSTANCE.PLAN_ID = INUPLANID;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fnuInstanceByTagName isbTagname: [ '||ISBTAGNAME||' ] inuPlanId: ['||INUPLANID||' ]', 10);

        
        OPEN  CUGETINSTANCEID;
        FETCH CUGETINSTANCEID INTO NUINSTANCEID;
        CLOSE CUGETINSTANCEID;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fnuInstanceByTagName nuInstanceId: [ '||NUINSTANCEID||' ]', 10);
        RETURN NUINSTANCEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fnuInstanceByTagName', 5);
            IF(CUGETINSTANCEID%ISOPEN) THEN CLOSE CUGETINSTANCEID; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fnuInstanceByTagName', 5);
            IF(CUGETINSTANCEID%ISOPEN) THEN CLOSE CUGETINSTANCEID; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUINSTANCEBYTAGNAME;
    
    




















    FUNCTION FNUINSTANCEBYPARENT
    (
        ISBTAGNAME     IN     WF_INSTANCE.TAG_NAME%TYPE,
        INUPARENTID    IN     WF_INSTANCE.PARENT_ID%TYPE
    )
    RETURN WF_INSTANCE.INSTANCE_ID%TYPE
    IS
        NUINSTANCEID   WF_INSTANCE.INSTANCE_ID%TYPE;

        CURSOR CUGETINSTANCEID
        (
            ISBTAGNAMEINS  IN     WF_INSTANCE.TAG_NAME%TYPE,
            INUPARENTIDINS IN     WF_INSTANCE.PARENT_ID%TYPE
        )
        IS
            SELECT  /*+ index(WF_INSTANCE IX_WF_INSTANCE21) */
                    WF_INSTANCE.INSTANCE_ID
            FROM    /*+ PS_BCPlanCreation.fnuInstanceByParent.SAO506369 */
                    WF_INSTANCE
            WHERE   WF_INSTANCE.PARENT_ID = INUPARENTIDINS
            AND     WF_INSTANCE.TAG_NAME = ISBTAGNAMEINS;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fnuInstanceByParent isbTagname: [ '||ISBTAGNAME||' ] inuParentId: ['||INUPARENTID||' ]', 10);

        
        OPEN  CUGETINSTANCEID(ISBTAGNAME, INUPARENTID);
        FETCH CUGETINSTANCEID INTO NUINSTANCEID;
        CLOSE CUGETINSTANCEID;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fnuInstanceByParent nuInstanceId: [ '||NUINSTANCEID||' ]', 10);
        RETURN NUINSTANCEID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fnuInstanceByParent', 5);
            IF(CUGETINSTANCEID%ISOPEN) THEN CLOSE CUGETINSTANCEID; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fnuInstanceByParent', 5);
            IF(CUGETINSTANCEID%ISOPEN) THEN CLOSE CUGETINSTANCEID; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUINSTANCEBYPARENT;

    

















    FUNCTION FTBCAUSALSBYACTIVITY
    (
        ISBTAGNAME   IN   WF_CAUSALS_ACTIVITY.ACTIVITY_TAG_NAME%TYPE
    )
    RETURN TYTBCAUSALSACTIVITY
    IS
        TBCAUSALSACTIVITY           TYTBCAUSALSACTIVITY;
        CURSOR CUGETCAUSALS
        IS
            SELECT  /*+ index(WF_CAUSALS_ACTIVITY IDX_WF_CAUSALS_ACTIVITY03) */
                    WF_CAUSALS_ACTIVITY.CAUSAL_ID,
                    WF_CAUSALS_ACTIVITY.ALIAS
            FROM    /*+ PS_BCPlanCreation.ftbCausalsByActivity.SAO497103 */
                    WF_CAUSALS_ACTIVITY
            WHERE   WF_CAUSALS_ACTIVITY.ACTIVITY_TAG_NAME = ISBTAGNAME;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.ftbCausalsByActivity', 10);

        
        OPEN  CUGETCAUSALS;
        FETCH CUGETCAUSALS BULK COLLECT INTO TBCAUSALSACTIVITY;
        CLOSE CUGETCAUSALS;

        UT_TRACE.TRACE('END PS_BCPlanCreation.ftbCausalsByActivity', 10);
        RETURN TBCAUSALSACTIVITY;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.ftbCausalsByActivity', 5);
            IF(CUGETCAUSALS%ISOPEN) THEN CLOSE CUGETCAUSALS; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.ftbCausalsByActivity', 5);
            IF(CUGETCAUSALS%ISOPEN) THEN CLOSE CUGETCAUSALS; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FTBCAUSALSBYACTIVITY;

    


















    FUNCTION FRCGETINSTANCEBYPLAN
    (
        INUPLANID         IN      WF_INSTANCE.PLAN_ID%TYPE,
        INUNODETYPEID     IN      WF_INSTANCE.NODE_TYPE_ID%TYPE
    )
    RETURN TYRCINSTANCE
    IS
        RCINSTANCE      TYRCINSTANCE;
        CURSOR CUGETINFOINSTANCE
        IS
            SELECT  /*+ index(WF_INSTANCE IDX_WF_INSTANCE_01) */
                    WF_INSTANCE.INSTANCE_ID,
                    WF_INSTANCE.EXTERNAL_ID,
                    WF_INSTANCE.ENTITY_ID
            FROM    /*+ PS_BCPlanCreation.frcGetInstanceByPlan.SAO497103 */
                    WF_INSTANCE
            WHERE   WF_INSTANCE.PARENT_ID    = INUPLANID
            AND     WF_INSTANCE.NODE_TYPE_ID = INUNODETYPEID
            FOR UPDATE NOWAIT;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.frcGetInstanceByPlan', 10);

        
        OPEN  CUGETINFOINSTANCE;
        FETCH CUGETINFOINSTANCE INTO RCINSTANCE;
        CLOSE CUGETINFOINSTANCE;

        UT_TRACE.TRACE('END PS_BCPlanCreation.frcGetInstanceByPlan', 10);
        RETURN RCINSTANCE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.frcGetInstanceByPlan', 5);
            IF(CUGETINFOINSTANCE%ISOPEN) THEN CLOSE CUGETINFOINSTANCE; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.frcGetInstanceByPlan', 5);
            IF(CUGETINFOINSTANCE%ISOPEN) THEN CLOSE CUGETINFOINSTANCE; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FRCGETINSTANCEBYPLAN;

    


















    FUNCTION FNUGETPROCESSID
    (
        INUEXTERNALID     IN     WF_INSTANCE.EXTERNAL_ID%TYPE,
        INUENTITYID       IN     WF_INSTANCE.ENTITY_ID%TYPE
    )
    RETURN WF_ENTITY_PROCESS.PROCESS_ID%TYPE
    IS
        NUPROCESSID     WF_ENTITY_PROCESS.PROCESS_ID%TYPE;
        CURSOR CUGETPROCESSID
        IS
            SELECT  /*+ index(WF_ENTITY_PROCESS IDX_WF_ENTITY_PROCESS_01) */
                    WF_ENTITY_PROCESS.PROCESS_ID
            FROM    /*+ PS_BCPlanCreation.fnuGetProcessId.SAO497103 */
                    WF_ENTITY_PROCESS
            WHERE   WF_ENTITY_PROCESS.EXTERNAL_ID = INUEXTERNALID
            AND     WF_ENTITY_PROCESS.ENTITY_ID   = INUENTITYID;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fnuGetProcessId', 10);

        
        OPEN  CUGETPROCESSID;
        FETCH CUGETPROCESSID INTO NUPROCESSID;
        CLOSE CUGETPROCESSID;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fnuGetProcessId', 10);
        RETURN NUPROCESSID;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fnuGetProcessId', 5);
            IF(CUGETPROCESSID%ISOPEN) THEN CLOSE CUGETPROCESSID; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fnuGetProcessId', 5);
            IF(CUGETPROCESSID%ISOPEN) THEN CLOSE CUGETPROCESSID; END IF;
            RAISE EX.CONTROLLED_ERROR;
    END FNUGETPROCESSID;

    



















    PROCEDURE UPDINFOINSTANCE
    (
        INUINSTANCEID         IN     WF_INSTANCE.INSTANCE_ID%TYPE,
        INUPREVINSTANCEID     IN     WF_INSTANCE.PREVIOUS_STATUS_ID%TYPE,
        INUEXECUTIONID        IN     WF_INSTANCE.EXECUTION_ID%TYPE,
        INUSTATUSID           IN     WF_INSTANCE.STATUS_ID%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.updInfoInstance', 10);
        
        UPDATE /*+ index(WF_INSTANCE PK_WF_INSTANCE) */
               WF_INSTANCE
        SET    WF_INSTANCE.PREVIOUS_INSTANCE_ID = INUPREVINSTANCEID,
               WF_INSTANCE.EXECUTION_ID         = INUEXECUTIONID,
               WF_INSTANCE.STATUS_ID            = INUSTATUSID
        WHERE  WF_INSTANCE.INSTANCE_ID          = INUINSTANCEID;

        UT_TRACE.TRACE('END PS_BCPlanCreation.updInfoInstance', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.updInfoInstance', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.updInfoInstance', 5);
            RAISE EX.CONTROLLED_ERROR;
    END UPDINFOINSTANCE;
    
    



















    PROCEDURE GETENTITYANDEXTERNAL
    (
        INUINSTANCEID     IN             WF_INSTANCE.INSTANCE_ID%TYPE,
        OSBEXTERNALID     OUT NOCOPY     WF_INSTANCE.EXTERNAL_ID%TYPE,
        ONUENTITYID       OUT            WF_INSTANCE.ENTITY_ID%TYPE
    )
    IS
        CURSOR CUGETENTITYANDEXTERNAL
        IS
            SELECT  /*+ index(wf_instance PK_WF_INSTANCE) */
                    WF_INSTANCE.EXTERNAL_ID,
                    WF_INSTANCE.ENTITY_ID
            FROM    /*+ PS_BCPlanCreation.GetEntityAndExternal.SAO498089 */
                    WF_INSTANCE
            WHERE   WF_INSTANCE.INSTANCE_ID = INUINSTANCEID;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.GetEntityAndExternal', 10);
        
        OPEN  CUGETENTITYANDEXTERNAL;
        FETCH CUGETENTITYANDEXTERNAL INTO OSBEXTERNALID, ONUENTITYID;
        CLOSE CUGETENTITYANDEXTERNAL;
        
        UT_TRACE.TRACE('END PS_BCPlanCreation.GetEntityAndExternal', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.GetEntityAndExternal', 5);
            IF(CUGETENTITYANDEXTERNAL%ISOPEN) THEN CLOSE CUGETENTITYANDEXTERNAL; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.GetEntityAndExternal', 5);
            IF(CUGETENTITYANDEXTERNAL%ISOPEN) THEN CLOSE CUGETENTITYANDEXTERNAL; END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETENTITYANDEXTERNAL;
    
    



















    PROCEDURE UPDINFOSUBPLAN
    (
        INUINSTANCEID        IN     WF_INSTANCE.INSTANCE_ID%TYPE,
        ISBGEOMETRY          IN     WF_INSTANCE.GEOMETRY%TYPE,
        INUNODETYPE          IN     WF_INSTANCE.NODE_TYPE_ID%TYPE,
        ISBMULTIINSTANCE     IN     WF_INSTANCE.MULTI_INSTANCE%TYPE
    )
    IS
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.UpdInfoSubPlan', 10);

        UPDATE /*+ index(WF_INSTANCE PK_WF_INSTANCE) */
               WF_INSTANCE
        SET    WF_INSTANCE.GEOMETRY       = ISBGEOMETRY,
               WF_INSTANCE.NODE_TYPE_ID   = INUNODETYPE,
               WF_INSTANCE.MULTI_INSTANCE = ISBMULTIINSTANCE
        WHERE  WF_INSTANCE.INSTANCE_ID    = INUINSTANCEID;

        UT_TRACE.TRACE('END PS_BCPlanCreation.UpdInfoSubPlan', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.UpdInfoSubPlan', 5);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.UpdInfoSubPlan', 5);
            RAISE EX.CONTROLLED_ERROR;
    END UPDINFOSUBPLAN;
    
    



















    FUNCTION FSBGETDESCNODECHILD
    (
        INUPARENTID        IN      WF_INSTANCE.PARENT_ID%TYPE,
        INUNODETYPEID      IN      WF_INSTANCE.NODE_TYPE_ID%TYPE
    )
    RETURN WF_INSTANCE.DESCRIPTION%TYPE
    IS
        SBDESCRIPTION       WF_INSTANCE.DESCRIPTION%TYPE;
        CURSOR CUGETDESCNODE
        IS
            SELECT  /*+ INDEX(WF_INSTANCE IDX_WF_INSTANCE_01) */
                    WF_INSTANCE.DESCRIPTION
            FROM    /*+ PS_BCPlanCreation.fsbGetDescNodeChild.SAO497429 */
                    WF_INSTANCE
            WHERE   WF_INSTANCE.PARENT_ID    = INUPARENTID
            AND     WF_INSTANCE.NODE_TYPE_ID = INUNODETYPEID;
    BEGIN
        UT_TRACE.TRACE('BEGIN PS_BCPlanCreation.fsbGetDescNodeChild', 10);

        
        OPEN  CUGETDESCNODE;
        FETCH CUGETDESCNODE INTO SBDESCRIPTION;
        CLOSE CUGETDESCNODE;

        UT_TRACE.TRACE('END PS_BCPlanCreation.fsbGetDescNodeChild', 10);
        RETURN SBDESCRIPTION;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR PS_BCPlanCreation.fsbGetDescNodeChild', 5);
            IF(CUGETDESCNODE%ISOPEN) THEN CLOSE CUGETDESCNODE; END IF;
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHERS PS_BCPlanCreation.fsbGetDescNodeChild', 5);
            IF(CUGETDESCNODE%ISOPEN) THEN CLOSE CUGETDESCNODE; END IF;
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBGETDESCNODECHILD;

END PS_BCPLANCREATION;