PACKAGE MO_BOActionCreatePlanWF AS
    




























































    
    
    
    



    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION;

    












































    PROCEDURE PROCESSACTION;
    
    













   
	
	
	





    FUNCTION FBOVALEXISTCONFIGPLAN
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
    )
    RETURN UT_DATATYPES.STYBOOLEAN;

END MO_BOACTIONCREATEPLANWF;

PACKAGE BODY MO_BOActionCreatePlanWF AS

    




























































    
    
    
    
    CSBVERSION  CONSTANT UT_DATATYPES.STYSAOVERSION := 'SAO533859';

    
    CNUEQUPACTYPINTERFAC    CONSTANT NUMBER(4) := 531;
    
    
    CNUENTITY_PACKAGE    CONSTANT NUMBER := 17;
    CNUENTITY_MOTIVE    CONSTANT NUMBER := 8;

    
    
    
    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION IS
    BEGIN
        RETURN CSBVERSION;
    END;

    





























    PROCEDURE PROCESSPLANMOTIVEDATES
        (
        IORCMOTIVE      IN OUT DAMO_MOTIVE.STYMO_MOTIVE,
        INUEXECMAXTIME  IN NUMBER,
        INUSTDTIME      IN NUMBER
        )
    IS
    BEGIN
        IORCMOTIVE.STANDARD_TIME := (INUSTDTIME/UT_DATE.CNUSECONDSBYDAY);

        
        IF (IORCMOTIVE.PROV_INITIAL_DATE IS NOT NULL) THEN
            IORCMOTIVE.INITIAL_PROCESS_DATE := IORCMOTIVE.PROV_INITIAL_DATE - IORCMOTIVE.STANDARD_TIME;
        END IF;

        
        IF (IORCMOTIVE.EXECUTION_MAX_DATE IS NULL) THEN

            
            IF (NVL(IORCMOTIVE.INITIAL_PROCESS_DATE,IORCMOTIVE.MOTIV_RECORDING_DATE) > IORCMOTIVE.MOTIV_RECORDING_DATE)
            THEN

                
                IORCMOTIVE.EXECUTION_MAX_DATE := IORCMOTIVE.INITIAL_PROCESS_DATE + (INUEXECMAXTIME/UT_DATE.CNUSECONDSBYDAY);
            ELSE

                
                IORCMOTIVE.EXECUTION_MAX_DATE := IORCMOTIVE.MOTIV_RECORDING_DATE + (INUEXECMAXTIME/UT_DATE.CNUSECONDSBYDAY);
            END IF;
        END IF;
        UT_TRACE.TRACE('Inicio Procesos:['||IORCMOTIVE.INITIAL_PROCESS_DATE||']M�xima de Ejecuci�n:['||IORCMOTIVE.EXECUTION_MAX_DATE||']',7);

        
        DAMO_MOTIVE.UPDRECORD(IORCMOTIVE);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;

       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;
    
    
    



















    PROCEDURE PROCESSPLANPACKAGEDATES
    (
        IRCPACKAGES     IN DAMO_PACKAGES.STYMO_PACKAGES,
        INUEXECMAXTIME  IN NUMBER,
        INUSTDTIME      IN NUMBER
    )
    IS
        CURFMOTIVE  CONSTANTS.TYREFCURSOR;
        RCMOTIVE    DAMO_MOTIVE.STYMO_MOTIVE;
    BEGIN
        UT_TRACE.TRACE('Inici� Metodo MO_BOActionCreatePlanWF.ProcessPlanPackageDates',5);

        
        CURFMOTIVE := MO_BCMOTIVE.FRFMOTIVESBYPACKAGEID(IRCPACKAGES.PACKAGE_ID);
        FETCH CURFMOTIVE INTO RCMOTIVE;
        WHILE CURFMOTIVE%FOUND LOOP
            UT_TRACE.TRACE('Motivo:['||RCMOTIVE.MOTIVE_ID||']',6);

            
            PROCESSPLANMOTIVEDATES(RCMOTIVE,INUEXECMAXTIME,INUSTDTIME);

            FETCH CURFMOTIVE INTO RCMOTIVE ;
        END LOOP;
        CLOSE CURFMOTIVE;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            GE_BOGENERALUTIL.CLOSE_REFCURSOR(CURFMOTIVE);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END;


    



















    PROCEDURE GETINTERFACECODEBYMOT
        (
        INUMOTIVEID         IN  MO_MOTIVE.MOTIVE_ID%TYPE,
        OSBINTERFACECODE    OUT VARCHAR2,
        ORCMOTIVE           OUT DAMO_MOTIVE.STYMO_MOTIVE
        )
    IS
        CSBATTRIBCODEINTERFA    CONSTANT UT_DATATYPES.STYMAXVARCHAR := 'INTERFACE_CODE';
        SBPACKTYPE              MO_PACKAGES.TAG_NAME%TYPE;
    BEGIN
        UT_TRACE.TRACE('Inicia Metodo MO_BOActionCreatePlanWF.GetInterfaceCodeByMot',7);

        
        ORCMOTIVE := DAMO_MOTIVE.FRCGETRECORD(INUMOTIVEID);

        SBPACKTYPE := DAMO_PACKAGES.FSBGETTAG_NAME(ORCMOTIVE.PACKAGE_ID);

        
        OSBINTERFACECODE := PS_BOLOADCONFIGPACKAGE.FSBVALPARAMBYMOT(SBPACKTYPE, ORCMOTIVE.PRODUCT_MOTIVE_ID, MO_BOCONSTANTS.CSBATTRIBCODEINTERFACE, CSBATTRIBCODEINTERFA);

        UT_TRACE.TRACE('Valor Par�metro:['||OSBINTERFACECODE||']',8);

        
        IF OSBINTERFACECODE IS NULL THEN
            
            OSBINTERFACECODE := PS_BOPACKTY_UNITTY.FNUINTERFBYMOTIVE(INUMOTIVEID);

            
            IF OSBINTERFACECODE IS NULL THEN
                OSBINTERFACECODE := TO_CHAR(MO_BOPARAMETER.FNUGETINTERFACE_ID);
            END IF;
        END IF;
        UT_TRACE.TRACE('Finaliza Metodo MO_BOActionCreatePlanWF.GetInterfaceCodeByMot',7);
    EXCEPTION
       WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
       WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETINTERFACECODEBYMOT;
    
    
























    PROCEDURE GETINTERFACECODEBYPACK
        (
        INUPACKAGEID        IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        OSBINTERFACECODE    OUT VARCHAR2,
        ORCPACKAGES         OUT DAMO_PACKAGES.STYMO_PACKAGES
        )
    IS
    BEGIN
        UT_TRACE.TRACE('Inicia MO_BOActionCreatePlanWF.GetInterfaceCodeByPack. Paquete:['||INUPACKAGEID||']',7);

        
        ORCPACKAGES := DAMO_PACKAGES.FRCGETRECORD(INUPACKAGEID);

        
        OSBINTERFACECODE := PS_BOPACKTYPEPARAM.FSBGETPACKTYPEPARAM
                            (
                            ORCPACKAGES.PACKAGE_TYPE_ID,
                            MO_BOCONSTANTS.CSBATTRIBCODEINTERFACE
                            );

        UT_TRACE.TRACE('Valor Par�metro:['||OSBINTERFACECODE||']',8);

        
        IF OSBINTERFACECODE IS NULL THEN

            
            OSBINTERFACECODE := PS_BOPACKTY_UNITTY.FNUINTERFBYPACKPROD(INUPACKAGEID);
            
            
            IF OSBINTERFACECODE IS NULL THEN
                
                OSBINTERFACECODE := PS_BOPACKTY_UNITTY.FNUINTERFBYPACKAGE(INUPACKAGEID);
                
                
                IF OSBINTERFACECODE IS NULL THEN
                    OSBINTERFACECODE := TO_CHAR(MO_BOPARAMETER.FNUGETINTERFACE_ID_PACK);
                END IF;
            END IF;
        END IF;

        UT_TRACE.TRACE('Finaliza MO_BOActionCreatePlanWF.GetInterfaceCodeByPack. C�digo Interfaz:['||OSBINTERFACECODE||']',7);

        EXCEPTION
            WHEN EX.CONTROLLED_ERROR THEN
                RAISE EX.CONTROLLED_ERROR;
            WHEN OTHERS THEN
                ERRORS.SETERROR;
                RAISE EX.CONTROLLED_ERROR;
    END;


    PROCEDURE PROCESSACTION
    IS
        NUMOTIVEID        NUMBER(15);
        NUPACKAGEID       NUMBER(15);
        NUEXECMAXTIME     NUMBER;
        NUSTDTIME         NUMBER;
        SBINTERFACECODE   VARCHAR2(10);
        NUEXTERNALID      NUMBER;
        NUENTITYID        NUMBER;
        NUPLANID          NUMBER;
        NUEXTERNALPACKAGEID NUMBER;
        NUUNITTYPEID      NUMBER;
        RCMOTIVE          DAMO_MOTIVE.STYMO_MOTIVE;
        RCPACKAGES        DAMO_PACKAGES.STYMO_PACKAGES;
        RCPS_PACKAGE_TYPE  DAPS_PACKAGE_TYPE.STYPS_PACKAGE_TYPE;
        NUERRORCODE       GE_MESSAGE.MESSAGE_ID%TYPE;
        SBERRORMESSAGE    VARCHAR2(2000);
        SBPACKTYPETAG     MO_PACKAGES.TAG_NAME%TYPE;
        RCWFDATAEXTERNAL  DAWF_DATA_EXTERNAL.STYWF_DATA_EXTERNAL;

        EXBUILDEREXECUTOR   EXCEPTION;
    BEGIN
        UT_TRACE.TRACE('Begin MO_BOActionCreatePlanWF.ProcessAction',3);
        UT_TRACE.TRACE('Inicia la Creaci�n de Plan en WF',3);

        
        GE_BOINSTANCE.GETVALUE(MO_BOCONSTANTS.CSBMO_MOTIVE,MO_BOCONSTANTS.CSBMOTIVE_ID,NUMOTIVEID);

        
        GE_BOINSTANCE.GETVALUE(MO_BOCONSTANTS.CSBMO_PACKAGES,MO_BOCONSTANTS.CSBPACKAGE_ID,NUPACKAGEID);
        
        UT_TRACE.TRACE('Motivo:['||NUMOTIVEID||']Paquete:['||NUPACKAGEID||']',4);

        SBPACKTYPETAG    := NULL;
        NUEXTERNALPACKAGEID := NULL;
        IF NUMOTIVEID IS NOT NULL THEN
            
            GETINTERFACECODEBYMOT(NUMOTIVEID,SBINTERFACECODE,RCMOTIVE);
            NUEXTERNALID := NUMOTIVEID;
            NUENTITYID := MO_BOPARAMETER.FNUGETENTITY_MOTIVE;
            
            IF ( RCMOTIVE.PACKAGE_ID IS NOT NULL AND DAMO_PACKAGES.FBLEXIST(RCMOTIVE.PACKAGE_ID) ) THEN
                RCPACKAGES        :=  DAMO_PACKAGES.FRCGETRECORD(RCMOTIVE.PACKAGE_ID);
                IF ( DAPS_PACKAGE_TYPE.FBLEXIST(RCPACKAGES.PACKAGE_TYPE_ID) ) THEN
                    RCPS_PACKAGE_TYPE :=  DAPS_PACKAGE_TYPE.FRCGETRECORD(RCPACKAGES.PACKAGE_TYPE_ID);
                    SBPACKTYPETAG     :=  RCPS_PACKAGE_TYPE.TAG_NAME;
                END IF;
                NUEXTERNALPACKAGEID := RCMOTIVE.PACKAGE_ID;
            END IF;

        ELSE
            
            GETINTERFACECODEBYPACK(NUPACKAGEID,SBINTERFACECODE,RCPACKAGES);
            NUEXTERNALID := NUPACKAGEID;
            NUENTITYID := MO_BOPARAMETER.FNUGETENTITY_PACKAGES;
             
            IF ( DAPS_PACKAGE_TYPE.FBLEXIST(RCPACKAGES.PACKAGE_TYPE_ID) ) THEN
                RCPS_PACKAGE_TYPE :=  DAPS_PACKAGE_TYPE.FRCGETRECORD(RCPACKAGES.PACKAGE_TYPE_ID);
                SBPACKTYPETAG     :=  RCPS_PACKAGE_TYPE.TAG_NAME;
                NUEXTERNALPACKAGEID := NUPACKAGEID;
            END IF;
        END IF;

        UT_TRACE.TRACE('Id Externo:['||NUEXTERNALID||']Entidad:['||NUENTITYID||']C�digo Interfaz:['||SBINTERFACECODE||']',4);
        
        MO_BOUTILITIES.INITIALIZEOUTPUT(NUERRORCODE,SBERRORMESSAGE);

        
        WF_BOCREATIONPLANCONTROL.BUILDEREXECUTOR
            (
                NUEXTERNALID,
                NUENTITYID,
                TO_NUMBER(SBINTERFACECODE),
                NUEXECMAXTIME,
                NUSTDTIME,
                NUPLANID,
                NUUNITTYPEID,
                NUERRORCODE,
                SBERRORMESSAGE
            );
        IF NVL(NUERRORCODE,MO_BOCONSTANTS.CNUOK) <> MO_BOCONSTANTS.CNUOK THEN
            RAISE EXBUILDEREXECUTOR;
        END IF;

         
        IF ( NOT DAWF_DATA_EXTERNAL.FBLEXIST(NUPLANID) ) THEN
            RCWFDATAEXTERNAL.PLAN_ID          := NUPLANID;
            RCWFDATAEXTERNAL.PACK_TYPE_TAG    := SBPACKTYPETAG;
            RCWFDATAEXTERNAL.PACKAGE_ID       := NUEXTERNALPACKAGEID;
            RCWFDATAEXTERNAL.UNIT_TYPE_ID     := NUUNITTYPEID;

            DAWF_DATA_EXTERNAL.INSRECORD( RCWFDATAEXTERNAL );
        END IF;

        UT_TRACE.TRACE('Tiempo Max. Ejecuci�n:['||NUEXECMAXTIME||'] Tiempo Estandar:['||NUSTDTIME||'] Id Plan:['||NUPLANID||']',4);

        IF NUMOTIVEID IS NOT NULL THEN
            
            PROCESSPLANMOTIVEDATES(RCMOTIVE,NUEXECMAXTIME,NUSTDTIME);
        ELSE
            
            PROCESSPLANPACKAGEDATES(RCPACKAGES,NUEXECMAXTIME,NUSTDTIME);
        END IF;
        
        
        IF NOT(DAMO_PACKAGES.FSBGETTAG_NAME(NUPACKAGEID) = PS_BOPACKAGETYPE.CSBTAGPETITION) THEN

            
            MO_BODATA_FOR_ORDER.CREATEINITIALORDER(NUPACKAGEID);

        END IF;


        UT_TRACE.TRACE('Finaliza la Creaci�n de Plan en WF',3);
        
        UT_TRACE.TRACE('End MO_BOActionCreatePlanWF.ProcessAction',3);
    EXCEPTION
        WHEN EXBUILDEREXECUTOR THEN
            ERRORS.SETERROR
                (
                MO_BOCONSTERROR.CNUERRCALLSERVICE,
                'WF_BOCreationPlanControl.BuilderExecutor' || '|' ||
                TO_CHAR(NUERRORCODE) || ' - ' || SBERRORMESSAGE
                );
            RAISE EX.CONTROLLED_ERROR;
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('CONTROLLED_ERROR MO_BOActionCreatePlanWF.ProcessAction',3);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('OTHER MO_BOActionCreatePlanWF.ProcessAction',3);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END PROCESSACTION;

   
	


    


















    FUNCTION FBOVALEXISTCONFIGPLAN
    (
        INUPACKAGEID    IN  MO_PACKAGES.PACKAGE_ID%TYPE,
        INUMOTIVEID     IN  MO_MOTIVE.MOTIVE_ID%TYPE DEFAULT NULL
    )
    RETURN UT_DATATYPES.STYBOOLEAN
    IS
        RCPACKAGES          DAMO_PACKAGES.STYMO_PACKAGES;
        RCMOTIVE            DAMO_MOTIVE.STYMO_MOTIVE;
        SBINTERFACECODE     UT_DATATYPES.STYMAXVARCHAR;
        NUEXTERNALID        WF_INSTANCE.EXTERNAL_ID%TYPE;
        RCWORKFLOW          PS_BCPLANCREATION.TYRCWORKFLOW;
    BEGIN
        UT_TRACE.TRACE('BEGIN   MO_BOActionCreatePlanWF.fboValExistConfigPlan   inuPackageId['||INUPACKAGEID||'] inuMotiveId['||INUMOTIVEID||']', 15);
        
        IF INUMOTIVEID IS NULL THEN

            UT_TRACE.TRACE('Obtiene el codigo de interfaz por solicitud ['||INUPACKAGEID||']', 15);
            
            GETINTERFACECODEBYPACK( INUPACKAGEID, SBINTERFACECODE, RCPACKAGES );
            NUEXTERNALID := INUPACKAGEID;
        ELSE
            
            GETINTERFACECODEBYMOT( INUMOTIVEID, SBINTERFACECODE, RCMOTIVE );
            NUEXTERNALID := INUMOTIVEID;
        END IF;
        
        UT_TRACE.TRACE('Solicitud ['||INUPACKAGEID||'] inuMotiveId['||INUMOTIVEID||'] sbInterfaceCode['||SBINTERFACECODE||'] nuExternalId['||NUEXTERNALID||']', 15);
        
        
        RCWORKFLOW := PS_BOPLANCREATION.FNUGETWORKFLOW( TO_NUMBER(SBINTERFACECODE), NUEXTERNALID );
        
        UT_TRACE.TRACE('Se obtiene el identificador del plan ['||RCWORKFLOW.NUWORKFLOWID||']', 15);
        UT_TRACE.TRACE('END  MO_BOActionCreatePlanWF.fboValExistConfigPlan', 15);
        
        RETURN RCWORKFLOW.NUWORKFLOWID IS NOT NULL;
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ERROR   MO_BOActionCreatePlanWF.fboValExistConfigPlan   error : ex.CONTROLLED_ERROR', 15);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('ERROR   MO_BOActionCreatePlanWF.fboValExistConfigPlan   error : others', 15);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FBOVALEXISTCONFIGPLAN;
END MO_BOACTIONCREATEPLANWF;