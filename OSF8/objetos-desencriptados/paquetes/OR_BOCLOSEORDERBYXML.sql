PACKAGE OR_BOCLOSEORDERBYXML
IS
    

















































    
    
    
    
    
    CSBCLOSE_ORDER_XSD_DEF  CONSTANT UT_DATATYPES.STYNAME := 'XSD_OS_CLOSEORDERBYXML.xsd';

    



    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION;
    
    



    PROCEDURE CLOSEORDERBYXML
    (
        ICLDATA   IN   UT_DATATYPES.STYCLOB
    );
    
    



    PROCEDURE INITIALIZEOUTPUT
    (
      ONUERRORCODE      OUT   GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
      OSBERRORMESSAGE   OUT   NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE
    );

END OR_BOCLOSEORDERBYXML;

PACKAGE BODY OR_BOCLOSEORDERBYXML
IS
    

















































    
    
    
    
    CSBVERSION           CONSTANT UT_DATATYPES.STYSAOVERSION    := 'SAO554387';
    
    
    CNUERR_20442         CONSTANT GE_MESSAGE.MESSAGE_ID%TYPE    := 20442;
    
    CSBGRATER_THAN       CONSTANT UT_DATATYPES.STYMINVARCHAR    := '>';
    CSBSMALLER_THAN      CONSTANT UT_DATATYPES.STYMINVARCHAR    := '<';
    CSBOPEN_KEY          CONSTANT UT_DATATYPES.STYMINVARCHAR    := '{';
    CSBEXCL_MARK         CONSTANT UT_DATATYPES.STYMINVARCHAR    := '!';
    CSBAT                CONSTANT UT_DATATYPES.STYMINVARCHAR    := '@';
    CSBPLUS_SING         CONSTANT UT_DATATYPES.STYMINVARCHAR    := '+';
    CSBFLAG_A            CONSTANT UT_DATATYPES.STYMINVARCHAR    := 'A';
    CSBFLAG_R            CONSTANT UT_DATATYPES.STYMINVARCHAR    := 'R';
    CSBCLOSE_ATTR        CONSTANT UT_DATATYPES.STYVARCHARINDEX  := ';;;;;';
    CNUMINUTES           CONSTANT UT_DATATYPES.STYNUMBERINDEX   :=  1440;
    
    
    
    
    
    GTBREADINGS          OR_BCCLOSEORDERBYXML.TYTBREADINGS;
    GNUIDXREADINGS       UT_DATATYPES.STYNUMBERINDEX;

    














    FUNCTION FSBVERSION  RETURN UT_DATATYPES.STYSAOVERSION IS
    BEGIN

        RETURN CSBVERSION;

    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END FSBVERSION;

    
















    PROCEDURE ADDREADINGSTOLINE
    (
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        TBREADINGS      IN      OR_BCCLOSEORDERBYXML.TYTBREADINGS
    )
    IS
        NUIDXREADINGS   UT_DATATYPES.STYNUMBERINDEX;
        SBMED           GE_ITEMS_SERIADO.SERIE%TYPE;
        NUCONSTYPE      TIPOCONS.TCONCODI%TYPE;
        READING         LECTELME.LEEMLETO%TYPE;
        SBCAUSE         LECTELME.LEEMCLEC%TYPE;
        NUOBSONE        LECTELME.LEEMOBLE%TYPE;
        NUOBSTWO        LECTELME.LEEMOBSB%TYPE;
        NUOBSTHREE      LECTELME.LEEMOBSC%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddReadingsToLine - [tbReadings.count: '||TBREADINGS.COUNT||']', 10);

        
        IF TBREADINGS.COUNT > 0 THEN
        
           NUIDXREADINGS := TBREADINGS.FIRST;
           
           LOOP
              EXIT WHEN NUIDXREADINGS IS NULL;

              SBMED      := TBREADINGS(NUIDXREADINGS).SBMEDSERIE;
              NUCONSTYPE := TBREADINGS(NUIDXREADINGS).NUCONSTYPE;
              READING    := TBREADINGS(NUIDXREADINGS).NUVALUEREADING;
              SBCAUSE    := TBREADINGS(NUIDXREADINGS).SBCAUSEREADING;
              NUOBSONE   := TBREADINGS(NUIDXREADINGS).NUOBSERVATIONONE;
              NUOBSTWO   := TBREADINGS(NUIDXREADINGS).NUOBSERVATIONTWO;
              NUOBSTHREE := TBREADINGS(NUIDXREADINGS).NUOBSERVATIONTHREE;

              
              IOSBLINE := IOSBLINE||SBMED||GE_BOCONSTANTS.CSBSEMICOLON;

              IOSBLINE := IOSBLINE||NUCONSTYPE||GE_BOCONSTANTS.CSBEQUAL||
                          READING||GE_BOCONSTANTS.CSBEQUAL||SBCAUSE||GE_BOCONSTANTS.CSBEQUAL||
                          NUOBSONE||GE_BOCONSTANTS.CSBEQUAL||NUOBSTWO||GE_BOCONSTANTS.CSBEQUAL||NUOBSTHREE;

              
              IF NUIDXREADINGS < TBREADINGS.LAST THEN
                 IOSBLINE := IOSBLINE||CSBSMALLER_THAN;
              END IF;

              NUIDXREADINGS := TBREADINGS.NEXT(NUIDXREADINGS);
           END LOOP;
        END IF;
        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddReadingsToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddReadingsToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddReadingsToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDREADINGSTOLINE;
    
    



















    PROCEDURE ADDSEALSTOLINE
    (
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        ITBSEALS        IN      OR_BCCLOSEORDERBYXML.TYTBSEALS
    )
    IS
        NUIDXSEALS      UT_DATATYPES.STYNUMBERINDEX;
        SBMETERSEAL     GE_ITEMS_SERIADO.SERIE%TYPE;
        SBSERIE         GE_ITEMS_SERIADO.SERIE%TYPE;
        NULOCATION      GE_LOCATION_SERIAL.LOCATION_SERIAL_ID%TYPE;
        SBACTION        UT_DATATYPES.STYMINVARCHAR;
        SBMANIPULATED   UT_DATATYPES.STYMINVARCHAR;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddSealsToLine - [itbSeals.count: '||ITBSEALS.COUNT||']', 10);

        NUIDXSEALS := ITBSEALS.FIRST;

        LOOP
          EXIT WHEN NUIDXSEALS IS NULL;

          SBMETERSEAL      := ITBSEALS(NUIDXSEALS).SBMETERSEAL;
          SBSERIE          := ITBSEALS(NUIDXSEALS).SBSEALSERIE;
          NULOCATION       := ITBSEALS(NUIDXSEALS).NUSEALLOCATION;
          SBACTION         := ITBSEALS(NUIDXSEALS).SBSEALACTION;
          SBMANIPULATED    := ITBSEALS(NUIDXSEALS).SBSEALMANIPULATED;

          
          IOSBLINE := IOSBLINE||SBSERIE||GE_BOCONSTANTS.CSBEQUAL||NULOCATION||GE_BOCONSTANTS.CSBEQUAL||
                      SBACTION||GE_BOCONSTANTS.CSBEQUAL||SBMANIPULATED||GE_BOCONSTANTS.CSBEQUAL||SBMETERSEAL;

          
          IF NUIDXSEALS < ITBSEALS.LAST THEN
             
             IOSBLINE := IOSBLINE||CSBEXCL_MARK;
          END IF;

          NUIDXSEALS := ITBSEALS.NEXT(NUIDXSEALS);
        END LOOP;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddSealsToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddSealsToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddSealsToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDSEALSTOLINE;
    
    


















    PROCEDURE ADDAPPLICANCESTOLINE
    (
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        ITBAPPLICANCES  IN      OR_BCCLOSEORDERBYXML.TYTBAPPLICANCES
    )
    IS
        NUIDXAPPL           UT_DATATYPES.STYNUMBERINDEX;
        NUAPPLICANCE        GE_APPLIANCE.APPLIANCE_ID%TYPE;
        NUQUANT             OR_BCCLOSEORDERBYXML.STYNUMBERFOUR;
        NUHOURPERDAYS       OR_BCCLOSEORDERBYXML.STYNUMBERFOUR;
        NUDAYSPERMONTH      OR_BCCLOSEORDERBYXML.STYNUMBERTWO;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddApplicancesToLine - [itbApplicances.count: '||ITBAPPLICANCES.COUNT||']', 10);

        NUIDXAPPL := ITBAPPLICANCES.FIRST;

        LOOP
          EXIT WHEN NUIDXAPPL IS NULL;

          NUAPPLICANCE     := ITBAPPLICANCES(NUIDXAPPL).NUAPPLICANCE;
          NUQUANT          := ITBAPPLICANCES(NUIDXAPPL).NUAPPLICANCEQUANT;
          NUHOURPERDAYS    := ITBAPPLICANCES(NUIDXAPPL).NUHOURPERDAYS;
          NUDAYSPERMONTH   := ITBAPPLICANCES(NUIDXAPPL).NUDAYSPERMONTH;

          
          IOSBLINE := IOSBLINE||NUAPPLICANCE||GE_BOCONSTANTS.CSBEQUAL||NUQUANT||GE_BOCONSTANTS.CSBEQUAL||
                      NUHOURPERDAYS||GE_BOCONSTANTS.CSBEQUAL||NUDAYSPERMONTH;
                      
          
          IF NUIDXAPPL < ITBAPPLICANCES.LAST THEN
             
             IOSBLINE := IOSBLINE||CSBEXCL_MARK;
          END IF;

          NUIDXAPPL := ITBAPPLICANCES.NEXT(NUIDXAPPL);
        END LOOP;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddApplicancesToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddApplicancesToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddApplicancesToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDAPPLICANCESTOLINE;

    























    PROCEDURE ADDCOMPONENTTOLINE
    (
        IXLREADINGS     IN      UT_DATATYPES.STYXML,
        IXLSEALS        IN      UT_DATATYPES.STYXML,
        IXLAPPLICANCES  IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBSEALS        OR_BCCLOSEORDERBYXML.TYTBSEALS;
        TBAPPLICANCES  OR_BCCLOSEORDERBYXML.TYTBAPPLICANCES;
        
        
        TBREADINGS     OR_BCCLOSEORDERBYXML.TYTBREADINGS;
        NUIDXREAD      UT_DATATYPES.STYNUMBERINDEX;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddComponentToLine', 10);
        
        
        TBSEALS.DELETE;
        TBAPPLICANCES.DELETE;
        TBREADINGS.DELETE;
        
        
        IOSBLINE := IOSBLINE||CSBGRATER_THAN;

        
        OR_BCCLOSEORDERBYXML.GETCOMPONENTS
        (
           IXLREADINGS,
           IXLSEALS,
           IXLAPPLICANCES,
           TBREADINGS,
           TBSEALS,
           TBAPPLICANCES
        );
        
        
        IF TBREADINGS.COUNT > 0 THEN

           NUIDXREAD := TBREADINGS.FIRST;
           LOOP
             EXIT WHEN NUIDXREAD IS NULL;
             
             GNUIDXREADINGS := GNUIDXREADINGS + 1;

             
             GTBREADINGS(GNUIDXREADINGS) := TBREADINGS(NUIDXREAD);

             NUIDXREAD := TBREADINGS.NEXT(NUIDXREAD);
           END LOOP;
        END IF;

        
        ADDSEALSTOLINE(IOSBLINE, TBSEALS);
        
        
        ADDAPPLICANCESTOLINE(IOSBLINE, TBAPPLICANCES);

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddComponentToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddComponentToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddComponentToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDCOMPONENTTOLINE;
    
    





















    PROCEDURE ADDATTRTOLINE
    (
        IXLDATA         IN             UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT NOCOPY  UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBATTRIBUTES    OR_BCCLOSEORDERBYXML.TYTBATTRIBUTES;
        NUIDXATTR       UT_DATATYPES.STYNUMBERINDEX;
        NUIDXAUX        UT_DATATYPES.STYNUMBERINDEX;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddAttrToLine', 10);

        
        OR_BCCLOSEORDERBYXML.GETATTRIBUTES(IXLDATA, TBATTRIBUTES);
        
        
        IF TBATTRIBUTES.COUNT > 0 THEN
        
           
           IOSBLINE := IOSBLINE|| GE_BOCONSTANTS.CSBSEMICOLON;
        
           
           NUIDXATTR := TBATTRIBUTES.FIRST;
           
           LOOP
             EXIT WHEN NUIDXATTR IS NULL;
             
             IOSBLINE := IOSBLINE||TBATTRIBUTES(NUIDXATTR).SBATTRIBUTENAME||CSBGRATER_THAN||TBATTRIBUTES(NUIDXATTR).SBATTRIBUTEVALUE||CSBGRATER_THAN;
             
             



             
             
             IF TBATTRIBUTES(NUIDXATTR).XLSEALS IS NOT NULL THEN
             
                IOSBLINE := IOSBLINE||OR_BOCONSTANTS.CNUREADINGANDSEAL;
             
             
             ELSIF TBATTRIBUTES(NUIDXATTR).XLAPPLICANCES IS NOT NULL THEN

                IOSBLINE := IOSBLINE||OR_BOCONSTANTS.CNUAPPLIANCE;
             END IF;
             
             
             ADDCOMPONENTTOLINE(
                                 TBATTRIBUTES(NUIDXATTR).XLREADINGS,
                                 TBATTRIBUTES(NUIDXATTR).XLSEALS,
                                 TBATTRIBUTES(NUIDXATTR).XLAPPLICANCES,
                                 IOSBLINE
                               );
             
             
             IF NUIDXATTR < TBATTRIBUTES.LAST THEN
                
                IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBSEMICOLON;
                
             ELSE
                NUIDXAUX := NUIDXATTR;
                
                
                LOOP
                  EXIT WHEN NUIDXAUX = 5;
                  
                  
                  IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBSEMICOLON;
                  
                  
                  NUIDXAUX := NUIDXAUX + 1;
                  
                END LOOP;
                
             END IF;
             
             NUIDXATTR := TBATTRIBUTES.NEXT(NUIDXATTR);
             
           END LOOP;
        ELSE
           
           IOSBLINE := IOSBLINE||CSBCLOSE_ATTR;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddAttrToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddAttrToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddAttrToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDATTRTOLINE;
    
    




















    PROCEDURE ADDADITIONALATTRTOLINE
    (
        IXLDATA         IN             UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT NOCOPY  UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBADDATTRIBUTES OR_BCCLOSEORDERBYXML.TYTBADDATTRIBUTES;
        NUIDXADDATTR    UT_DATATYPES.STYNUMBERINDEX;
        
        SBADDATTRNAME   GE_ATTRIBUTES.NAME_ATTRIBUTE%TYPE;
        SBADDATTRVALUE  GE_ITEMS_ATTRIBUTES.DEFAULT_VALUE_1%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddAditionalAttrToLine', 10);

        
        OR_BCCLOSEORDERBYXML.GETADDATTRIBUTES(IXLDATA, TBADDATTRIBUTES);

        
        IF TBADDATTRIBUTES.COUNT > 0 THEN

           
           NUIDXADDATTR := TBADDATTRIBUTES.FIRST;

           LOOP
             EXIT WHEN NUIDXADDATTR IS NULL;
             
             SBADDATTRNAME  := TBADDATTRIBUTES(NUIDXADDATTR).SBADDATTRNAME;
             SBADDATTRVALUE := TBADDATTRIBUTES(NUIDXADDATTR).SBADDATTRVALUE;

             
             IOSBLINE := IOSBLINE||SBADDATTRNAME||GE_BOCONSTANTS.CSBEQUAL||SBADDATTRVALUE;
             
             
             IF NUIDXADDATTR < TBADDATTRIBUTES.LAST THEN
                IOSBLINE := IOSBLINE||CSBEXCL_MARK;
             END IF;

             NUIDXADDATTR := TBADDATTRIBUTES.NEXT(NUIDXADDATTR);
           END LOOP;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddAditionalAttrToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddAditionalAttrToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddAditionalAttrToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDADITIONALATTRTOLINE;
    
    















    PROCEDURE INSERTPLANNED
    (
        INUORDERACT        IN   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE,
        ITBITEMSPLANNED    IN   OR_BCCLOSEORDERBYXML.TYTBPLANNEDITEMS
    )
    IS
        NUIDX               UT_DATATYPES.STYNUMBERINDEX;
        NUCLASIFF           GE_ITEMS.ITEM_CLASSIF_ID%TYPE;
        NUORDERACTIVITYID   OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUITEMVALUE         OR_PLANNED_ITEMS.VALUE%TYPE;
        RCPLANNEDITEM       DAOR_PLANNED_ITEMS.STYOR_PLANNED_ITEMS;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddAditionalAttrToLine', 10);

        NUIDX := ITBITEMSPLANNED.FIRST;

        LOOP
          EXIT WHEN NUIDX IS NULL;
          
          
          NUCLASIFF := DAGE_ITEMS.FNUGETITEM_CLASSIF_ID(ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID);
          
          
          IF NUCLASIFF = 2 THEN

             
             IF (OR_BCPLANNINGACTIVIT.FNUEXISTPLANNEDACTIVITY(ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID, INUORDERACT) = 0 ) THEN
             
                
                OR_BOPLANNINGACTIVIT.CREATEPLANNEDACTIVITY
                (
                  INUORDERACT,
                  ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID,
                  GE_BOSEQUENCE.NEXTGROUPSEQUENCE,
                  ITBITEMSPLANNED(NUIDX).NUSEQUENCE,
                  ITBITEMSPLANNED(NUIDX).NUOBSERVATION,
                  NUORDERACTIVITYID
                );
                
                
                OR_BOLOADDATA.GETITEMVALUE(
                                            INUORDERACT,
                                            ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID,
                                            ITBITEMSPLANNED(NUIDX).NUQUANTITY,
                                            NUITEMVALUE
                                          );
                                          
                
                RCPLANNEDITEM.PLANNED_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_PLANNED_ITEMS;
                RCPLANNEDITEM.ITEMS_ID := ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID;
                RCPLANNEDITEM.ORDER_ACTIVITY_ID := NUORDERACTIVITYID;
                RCPLANNEDITEM.ITEM_AMOUNT := COALESCE(ITBITEMSPLANNED(NUIDX).NUQUANTITY, 0);
                RCPLANNEDITEM.VALUE := COALESCE(NUITEMVALUE, 0);
                
                
                DAOR_PLANNED_ITEMS.INSRECORD(RCPLANNEDITEM);

             END IF;
             
          ELSE
             
             IF NUCLASIFF = 8 THEN

                
                OR_BOLOADDATA.GETITEMVALUE(
                                            INUORDERACT,
                                            ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID,
                                            ITBITEMSPLANNED(NUIDX).NUQUANTITY,
                                            NUITEMVALUE
                                          );

                
                RCPLANNEDITEM.PLANNED_ITEMS_ID := OR_BOSEQUENCES.FNUNEXTOR_PLANNED_ITEMS;
                RCPLANNEDITEM.ITEMS_ID := ITBITEMSPLANNED(NUIDX).NUPLANEDITEMID;
                RCPLANNEDITEM.ITEM_AMOUNT := COALESCE(ITBITEMSPLANNED(NUIDX).NUQUANTITY, 0);
                RCPLANNEDITEM.VALUE := COALESCE(NUITEMVALUE, 0);
                
                
                DAOR_PLANNED_ITEMS.INSRECORD(RCPLANNEDITEM);
             END IF;
          END IF;
          
          NUIDX := ITBITEMSPLANNED.NEXT(NUIDX);
        END LOOP;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.InsertPlanned', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.InsertPlanned', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.InsertPlanned', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INSERTPLANNED;
    
    

















    PROCEDURE ADDACTTOLEGALIZATIONLINE
    (
        ICLDATA         IN             UT_DATATYPES.STYCLOB,
        IOSBLINE        IN OUT NOCOPY  UT_DATATYPES.STYMAXVARCHAR
    )
    IS
       
       TBACTIVITIES     OR_BCCLOSEORDERBYXML.TYTBDATAACTIVITIES;
       NUIDXACT         UT_DATATYPES.STYNUMBERINDEX;
       
       TBPLANNEDITEMS   OR_BCCLOSEORDERBYXML.TYTBPLANNEDITEMS;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddActToLegalizationLine', 10);

        
        OR_BCCLOSEORDERBYXML.GETACTIVITIES(ICLDATA, TBACTIVITIES);
        
        NUIDXACT := TBACTIVITIES.FIRST;
        
        LOOP
          EXIT WHEN NUIDXACT IS NULL;

          
          OR_BCCLOSEORDERBYXML.GETPLANNEDITEMS(TBACTIVITIES(NUIDXACT).XLPLANNEDITEMS,  TBPLANNEDITEMS);
          
          
          IOSBLINE := IOSBLINE||TBACTIVITIES(NUIDXACT).NUORDERACTIVITY||CSBGRATER_THAN||
                      TBACTIVITIES(NUIDXACT).NUEXECUTED;

          
          IF TBACTIVITIES(NUIDXACT).NUACTIVITY IS NOT NULL THEN
             
             IOSBLINE := IOSBLINE||CSBGRATER_THAN||TBACTIVITIES(NUIDXACT).NUACTIVITY;
          END IF;

          
          ADDATTRTOLINE(TBACTIVITIES(NUIDXACT).XLATTRIBUTES, IOSBLINE);

          
          ADDADITIONALATTRTOLINE(TBACTIVITIES(NUIDXACT).XLADDATTRIBUTES, IOSBLINE);
          
          
          IF TBPLANNEDITEMS.COUNT > 0 THEN
          
             
             INSERTPLANNED(TBACTIVITIES(NUIDXACT).NUORDERACTIVITY, TBPLANNEDITEMS);

          END IF;
          
          
          IF NUIDXACT < TBACTIVITIES.LAST THEN
             IOSBLINE := IOSBLINE||CSBSMALLER_THAN;
          END IF;

          NUIDXACT := TBACTIVITIES.NEXT(NUIDXACT);
        END LOOP;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddActToLegalizationLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddActToLegalizationLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddActToLegalizationLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDACTTOLEGALIZATIONLINE;

    




















    PROCEDURE ADDRESOURCESTOLINE
    (
        ICLDATA         IN     UT_DATATYPES.STYCLOB,
        IOSBLINE        IN OUT NOCOPY  UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBRESORUCES     OR_BCCLOSEORDERBYXML.TYTBRESORUCES;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;
        TBREELS         OR_BCCLOSEORDERBYXML.TYTBREELSINFO;
        NUIDXREELS      UT_DATATYPES.STYNUMBERINDEX;
        
        NURESOURCE      GE_ITEMS.ITEMS_ID%TYPE;
        SBCODE          GE_ITEMS.CODE%TYPE;
        NUORDERACTIVITY OR_ORDER_ACTIVITY.ORDER_ACTIVITY_ID%TYPE;
        NUQUANTITY      OR_ORDER_ITEMS.LEGAL_ITEM_AMOUNT%TYPE;
        SBOUT           OR_ORDER_ITEMS.OUT_%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddResourcesToline', 10);

        
        OR_BCCLOSEORDERBYXML.GETRESOURCES(XMLTYPE(ICLDATA), TBRESORUCES);
        
        
        IF TBRESORUCES.COUNT > 0 THEN
        
            NUIDX := TBRESORUCES.FIRST;
            
            LOOP
              EXIT WHEN NUIDX IS NULL;
              
              NURESOURCE      := TBRESORUCES(NUIDX).NURESOURCEID;
              SBCODE          := TBRESORUCES(NUIDX).SBELEMENTCODE;
              NUORDERACTIVITY := TBRESORUCES(NUIDX).NUORDERACTIVITY;
              NUQUANTITY      := TBRESORUCES(NUIDX).NUQUANTITY;
              SBOUT           := TBRESORUCES(NUIDX).SBOUT;

              
              IOSBLINE := IOSBLINE||SBCODE||CSBGRATER_THAN||NUQUANTITY||CSBGRATER_THAN||SBOUT||CSBGRATER_THAN||NURESOURCE;

              
              OR_BCCLOSEORDERBYXML.GETRESOURCESREELS(TBRESORUCES(NUIDX).XLREELS, TBREELS);

              
              IF TBREELS.COUNT > 0 THEN

                 
                 IOSBLINE := IOSBLINE||CSBGRATER_THAN;

                 NUIDXREELS := TBREELS.FIRST;
                 
                 
                 IOSBLINE := IOSBLINE||1||CSBEXCL_MARK;

                 LOOP
                     EXIT WHEN NUIDXREELS IS NULL;

                     
                     IOSBLINE := IOSBLINE||TBREELS(NUIDXREELS).SBSERIE||CSBSMALLER_THAN||TBREELS(NUIDXREELS).NUINITIALPOS||CSBSMALLER_THAN||TBREELS(NUIDXREELS).NUFINALPOS;
                     
                     
                     IF NUIDXREELS < TBREELS.LAST THEN
                        IOSBLINE := IOSBLINE||CSBAT;
                     END IF;
                     
                     NUIDXREELS := TBREELS.NEXT(NUIDXREELS);
                 END LOOP;

              END IF;

              
              IF NUIDX < TBRESORUCES.LAST THEN
                 IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBSEMICOLON;
              END IF;
              
              
              NUIDX := TBRESORUCES.NEXT(NUIDX);
            END LOOP;
        END IF;
        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddResourcesToline', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddResourcesToline', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddResourcesToline', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDRESOURCESTOLINE;

    















    PROCEDURE ADDCOMMENTTOLINE
    (
        ICLDATA         IN      UT_DATATYPES.STYCLOB,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBCOMMENTS      OR_BCCLOSEORDERBYXML.TYTBCOMMENTS;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddCommentToLine', 10);
        
        
        OR_BCCLOSEORDERBYXML.GETCOMMENTS(XMLTYPE(ICLDATA), TBCOMMENTS);

        
        IF TBCOMMENTS.COUNT > 0 THEN

           NUIDX := TBCOMMENTS.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;

              
              IOSBLINE := IOSBLINE||TBCOMMENTS(NUIDX).NUCOMMENTTYPE||
                          GE_BOCONSTANTS.CSBSEMICOLON||TBCOMMENTS(NUIDX).SBOBSERVATION;

              
              IF NUIDX < TBCOMMENTS.LAST THEN
                 IOSBLINE := IOSBLINE||CSBSMALLER_THAN;
              END IF;
              NUIDX := TBCOMMENTS.NEXT(NUIDX);
           END LOOP;
        END IF;
        
        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddCommentToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddCommentToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddCommentToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDCOMMENTTOLINE;

    















    PROCEDURE ADDANOMALIESTOLINE
    (
        IXLDATA         IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        ISBFLAG         IN      UT_DATATYPES.STYMINVARCHAR
    )
    IS
        TBANOMALIES     OR_BCCLOSEORDERBYXML.TYTBANOMALIES;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;

    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddAnomaliesToLine', 10);
        
        
        IF ISBFLAG = CSBFLAG_A THEN
        
           
           OR_BCCLOSEORDERBYXML.GETACTANOMALIES(IXLDATA, TBANOMALIES);

        
        ELSIF ISBFLAG = CSBFLAG_R THEN
        
           
           OR_BCCLOSEORDERBYXML.GETRESANOMALIES(IXLDATA, TBANOMALIES);
           
        END IF;

        
        IF TBANOMALIES.COUNT > 0 THEN
        
           NUIDX := TBANOMALIES.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;

              
              IOSBLINE := IOSBLINE||TBANOMALIES(NUIDX).NUANOMALIEID||GE_BOCONSTANTS.CSBEQUAL||TBANOMALIES(NUIDX).SBAMONALIEDES;

              
              IF NUIDX < TBANOMALIES.LAST THEN
                 IOSBLINE := IOSBLINE||CSBSMALLER_THAN;
              END IF;
              NUIDX := TBANOMALIES.NEXT(NUIDX);
           END LOOP;
           
        END IF;
        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddAnomaliesToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddAnomaliesToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddAnomaliesToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDANOMALIESTOLINE;
    
    















    PROCEDURE ADDINPSATTRTOLINE
    (
        IXLDATA         IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBINPSATTR      OR_BCCLOSEORDERBYXML.TYTBINSPATTRIBUTTES;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;

    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddInpsAttrToLine', 10);

        
        OR_BCCLOSEORDERBYXML.GETINSPACTIVITIESATTR(IXLDATA, TBINPSATTR);

        
        IF TBINPSATTR.COUNT > 0 THEN

           NUIDX := TBINPSATTR.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;

              
              IOSBLINE := IOSBLINE||TBINPSATTR(NUIDX).NUORDERACTIVITYID||CSBAT||
                          TBINPSATTR(NUIDX).SBATTRNAME||GE_BOCONSTANTS.CSBEQUAL||TBINPSATTR(NUIDX).SBATTRVALUE;

              
              IF NUIDX < TBINPSATTR.LAST THEN
                 IOSBLINE := IOSBLINE||CSBPLUS_SING;
              END IF;
              NUIDX := TBINPSATTR.NEXT(NUIDX);
           END LOOP;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddInpsAttrToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddInpsAttrToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddInpsAttrToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINPSATTRTOLINE;
    
    























    PROCEDURE ADDINSPACTIVITIES
    (
        IXLDATA         IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE
    )
    IS
        TBINSACTIVITIES      OR_BCCLOSEORDERBYXML.TYTBINSPACTIVITIES;
        NUIDX                UT_DATATYPES.STYNUMBERINDEX;
        NUINSPEDETAILID      OR_ITEMS_ORDEN_INSPE.ID_ITEM_ORDENS_INSPE%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddInspActivities', 10);

        
        OR_BCCLOSEORDERBYXML.GETINSPACTVITIES(IXLDATA, TBINSACTIVITIES);

        
        IF TBINSACTIVITIES.COUNT > 0 THEN

           NUIDX := TBINSACTIVITIES.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;
              
              
              NUINSPEDETAILID := OR_BCCLOSEORDERBYXML.FNUGETINSPEDETAILID(INUORDERID, TBINSACTIVITIES(NUIDX).NUACTIVITY);
              
              
              IF NUINSPEDETAILID IS NULL THEN
                 GE_BOERRORS.SETERRORCODEARGUMENT(CNUERR_20442, TBINSACTIVITIES(NUIDX).NUACTIVITY||'|'||INUORDERID);
              END IF;

              
              IOSBLINE := IOSBLINE||NUINSPEDETAILID||GE_BOCONSTANTS.CSBEQUAL||TBINSACTIVITIES(NUIDX).NUACTIVITY||GE_BOCONSTANTS.CSBEQUAL||
                          TBINSACTIVITIES(NUIDX).NUQUANTITY||CSBGRATER_THAN||TBINSACTIVITIES(NUIDX).SBINSPECTED||CSBGRATER_THAN;
              
              
              ADDANOMALIESTOLINE(TBINSACTIVITIES(NUIDX).XLANOMALIES, IOSBLINE, CSBFLAG_A);
              
              
              IOSBLINE := IOSBLINE||CSBGRATER_THAN;
              
              
              ADDINPSATTRTOLINE(TBINSACTIVITIES(NUIDX).XLATTRIBUTES, IOSBLINE);

              
              IF NUIDX < TBINSACTIVITIES.LAST THEN
                 IOSBLINE := IOSBLINE||CSBOPEN_KEY;
              END IF;
              NUIDX := TBINSACTIVITIES.NEXT(NUIDX);
           END LOOP;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddInspActivities', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddInspActivities', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddInspActivities', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINSPACTIVITIES;

    


















    PROCEDURE ADDINSPRESOURCES
    (
        IXLDATA         IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBINSRESOURCES  OR_BCCLOSEORDERBYXML.TYTBINSPRESOURCES;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;
        SBINSPEDETAIL   UT_DATATYPES.STYVARCHARINDEX := 'null';
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddInspResources', 10);

        
        OR_BCCLOSEORDERBYXML.GETINSPRESORUCES(IXLDATA, TBINSRESOURCES);

        
        IF TBINSRESOURCES.COUNT > 0 THEN

           NUIDX := TBINSRESOURCES.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;
              
              
              IF TBINSRESOURCES(NUIDX).NUINSPDETAIL IS NOT NULL THEN
                 SBINSPEDETAIL := UT_CONVERT.FSBNUMBERTOCHAR(TBINSRESOURCES(NUIDX).NUINSPDETAIL);
              END IF;

              
              IOSBLINE := IOSBLINE||SBINSPEDETAIL||GE_BOCONSTANTS.CSBEQUAL||
                          TBINSRESOURCES(NUIDX).NURESOURCE||GE_BOCONSTANTS.CSBEQUAL||
                          TBINSRESOURCES(NUIDX).NUQUANTITY||CSBGRATER_THAN;

              
              ADDANOMALIESTOLINE(TBINSRESOURCES(NUIDX).XLANOMALIES, IOSBLINE, CSBFLAG_R);

              
              IF NUIDX < TBINSRESOURCES.LAST THEN
                 IOSBLINE := IOSBLINE||CSBOPEN_KEY;
              END IF;
              NUIDX := TBINSRESOURCES.NEXT(NUIDX);
           END LOOP;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddInspResources', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddInspResources', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddInspResources', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINSPRESOURCES;

    















    PROCEDURE ADDINSPDEVICES
    (
        IXLDATA         IN      UT_DATATYPES.STYXML,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR
    )
    IS
        TBINSDEVICES    OR_BCCLOSEORDERBYXML.TYTBINSPDEVICES;
        NUIDX           UT_DATATYPES.STYNUMBERINDEX;

    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddInspDevices', 10);

        
        OR_BCCLOSEORDERBYXML.GETINSPDEVICES(IXLDATA, TBINSDEVICES);

        
        IF TBINSDEVICES.COUNT > 0 THEN

           NUIDX := TBINSDEVICES.FIRST;

           LOOP
              EXIT WHEN NUIDX IS NULL;

              
              IOSBLINE := IOSBLINE||TBINSDEVICES(NUIDX).NUINSPDETAIL||GE_BOCONSTANTS.CSBEQUAL||
                          TBINSDEVICES(NUIDX).NUDEVICE||GE_BOCONSTANTS.CSBEQUAL||
                          TBINSDEVICES(NUIDX).SBINSPECTED;

              
              IF NUIDX < TBINSDEVICES.LAST THEN
                 IOSBLINE := IOSBLINE||CSBOPEN_KEY;
              END IF;
              NUIDX := TBINSDEVICES.NEXT(NUIDX);
           END LOOP;
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddInspResources', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddInspDevices', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddInspDevices', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINSPDEVICES;
    
    




















    PROCEDURE ADDINSPECTIONTOLINE
    (
        ICLDATA         IN      UT_DATATYPES.STYCLOB,
        IOSBLINE        IN OUT  NOCOPY UT_DATATYPES.STYMAXVARCHAR,
        INUORDERID      IN      OR_ORDER.ORDER_ID%TYPE
    )
    IS
        RCINSPECTION    OR_BCCLOSEORDERBYXML.TYRCINSPECTIONS;
    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.AddInspectionToLine', 10);

        
        OR_BCCLOSEORDERBYXML.GETINSPENCTIONDATA(XMLTYPE(ICLDATA), RCINSPECTION);

        
        IF (RCINSPECTION.XLINSPACT IS NOT NULL) OR
           (RCINSPECTION.XLINSPRES IS NOT NULL) OR
           (RCINSPECTION.XLINSPDEV IS NOT NULL)
        THEN

            
           IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBPIPE;
           
           
           ADDINSPACTIVITIES(RCINSPECTION.XLINSPACT, IOSBLINE, INUORDERID);
           
           
           IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBSEMICOLON;
          
           
           ADDINSPRESOURCES(RCINSPECTION.XLINSPRES, IOSBLINE);
           
           
           IOSBLINE := IOSBLINE||GE_BOCONSTANTS.CSBSEMICOLON;
          
           
           ADDINSPDEVICES(RCINSPECTION.XLINSPDEV, IOSBLINE);

        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.AddInspectionToLine', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.AddInspectionToLine', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.AddInspectionToLine', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END ADDINSPECTIONTOLINE;
    
    















    PROCEDURE CLOSEORDER
    (
        ISBLINE          IN  UT_DATATYPES.STYMAXVARCHAR,
        IDTINITDATE      IN  OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        IDTFINALDATE     IN  OR_ORDER.EXECUTION_FINAL_DATE%TYPE
    )
    IS
        SBISADMINORDER      UT_DATATYPES.STYMINVARCHAR;
        NUORDERID           OR_ORDER.ORDER_ID%TYPE;
        NUPERSONID          GE_PERSON.PERSON_ID%TYPE;
        NUCAUSALID          OR_ORDER.CAUSAL_ID%TYPE;
        NUOPERUNITID        OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
        TBLINE              UT_STRING.TYTB_STRING;
        NUERRORCODE         GE_ERROR_LOG.ERROR_LOG_ID%TYPE;
        SBERRORMESSAGE      GE_ERROR_LOG.DESCRIPTION%TYPE;
        

    BEGIN
        UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.CloseOrder', 10);
        
        
        OR_BOACTIVITIESLEGALIZEBYFILE.VALIDINITDATATOLEGALBYFILE
        (
            ISBLINE,
            IDTINITDATE,
            IDTFINALDATE,
            SBISADMINORDER,
            NUORDERID,
            NUPERSONID,
            NUCAUSALID,
            NUOPERUNITID,
            TBLINE,
            NUERRORCODE,
            SBERRORMESSAGE
        );

        
        IF NUERRORCODE = GE_BOCONSTANTS.CNUSUCCESS THEN

            
            OR_BOACTIVITIESLEGALIZEBYFILE.CLOSEORDERBYLINE
            (
                NUORDERID,
                NUPERSONID,
                NUCAUSALID,
                NUOPERUNITID,
                IDTINITDATE,
                IDTFINALDATE,
                TBLINE
            );
        END IF;

        UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.CloseOrder', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.CloseOrder', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.CloseOrder', 10);
            ERRORS.SETERROR;
    		RAISE EX.CONTROLLED_ERROR;
    END CLOSEORDER;
    
    


















    PROCEDURE GETBASICDATAORDER
    (
        ICLDATA             IN         UT_DATATYPES.STYCLOB,
        ONUORDERID          OUT        OR_ORDER.ORDER_ID%TYPE,
        ONUCAUSALID         OUT        GE_CAUSAL.CAUSAL_ID%TYPE,
        ONUPERSONID         OUT        GE_PERSON.PERSON_ID%TYPE,
        ODTINITEXCDATE      OUT        OR_ORDER.EXEC_INITIAL_DATE%TYPE,
        ODTENDEXCDATE        OUT        OR_ORDER.EXECUTION_FINAL_DATE%TYPE,
        ONUOPERUNITID       OUT        OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE
    )
    IS
        RCORDER             DAOR_ORDER.STYOR_ORDER;
        NUDURATION          GE_ITEMS.STANDARD_TIME%TYPE;
    BEGIN
         UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.GetBasicDataOrder', 10);

         
         OR_BCCLOSEORDERBYXML.GETORDERINFO
         (
          ICLDATA,
          ONUORDERID,
          ONUCAUSALID,
          ONUPERSONID,
          ODTINITEXCDATE,
          ODTENDEXCDATE
         );
         
         
         IF ODTINITEXCDATE IS NULL AND ODTENDEXCDATE IS NULL THEN
         
            
            RCORDER := DAOR_ORDER.FRCGETRECORD(ONUORDERID);
            
            
            IF RCORDER.EXEC_INITIAL_DATE IS NULL AND RCORDER.EXECUTION_FINAL_DATE IS NULL THEN
            
               
               ODTENDEXCDATE := UT_DATE.FDTSYSDATE;
               
               
               OR_BOPROGRAMING.GETSTANDARDTIMEBYORDER(ONUORDERID, NUDURATION);

               
               ODTINITEXCDATE :=  ODTENDEXCDATE - NUDURATION/CNUMINUTES;
               
            ELSE
               ODTINITEXCDATE := RCORDER.EXEC_INITIAL_DATE;
               ODTENDEXCDATE  := RCORDER.EXECUTION_FINAL_DATE;

            END IF;
            
         END IF;
         
          
          
          
          OR_BOFWLEGALIZEORDER.VALIDATEFINALDATE
             (
                ODTINITEXCDATE,
                ODTENDEXCDATE
             );
         
         
         ONUOPERUNITID := DAOR_ORDER.FNUGETOPERATING_UNIT_ID(ONUORDERID);
    
         UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.GetBasicDataOrder', 10);
         
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.GetBasicDataOrder', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.GetBasicDataOrder', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END GETBASICDATAORDER;
    
    


























































































































































    PROCEDURE CLOSEORDERBYXML
    (
        ICLDATA             IN      UT_DATATYPES.STYCLOB
    )
    IS
        
        SBLINE             UT_DATATYPES.STYMAXVARCHAR;
        
        NUORDERID          OR_ORDER.ORDER_ID%TYPE;
        NUCAUSALID         GE_CAUSAL.CAUSAL_ID%TYPE;
        NUPERSONID         GE_PERSON.PERSON_ID%TYPE;
        DTINITEXCDATE      OR_ORDER.EXEC_INITIAL_DATE%TYPE;
        DENDEXCDATE        OR_ORDER.EXECUTION_FINAL_DATE%TYPE;
        NUOPERUNITID       OR_OPERATING_UNIT.OPERATING_UNIT_ID%TYPE;
    BEGIN
        UT_TRACE.TRACE('BEGIN CloseOrderByXML.CloseOrderByXML', 10);
        
        
        GTBREADINGS.DELETE;
        GNUIDXREADINGS := 0;
        
        
        SBLINE := '';

        
        GETBASICDATAORDER
        (
            ICLDATA,
            NUORDERID,
            NUCAUSALID,
            NUPERSONID,
            DTINITEXCDATE,
            DENDEXCDATE,
            NUOPERUNITID
        );
        
        
        SBLINE := SBLINE||NUORDERID||GE_BOCONSTANTS.CSBPIPE||NUCAUSALID||GE_BOCONSTANTS.CSBPIPE||NUPERSONID||GE_BOCONSTANTS.CSBPIPE||''||GE_BOCONSTANTS.CSBPIPE;
        
        
        ADDACTTOLEGALIZATIONLINE(ICLDATA, SBLINE);
        
        
        SBLINE := SBLINE||GE_BOCONSTANTS.CSBPIPE;
        
        
        ADDRESOURCESTOLINE(ICLDATA, SBLINE);
        
        
        SBLINE := SBLINE||GE_BOCONSTANTS.CSBPIPE;
        
        
        ADDREADINGSTOLINE(SBLINE, GTBREADINGS);
        
        
        SBLINE := SBLINE||GE_BOCONSTANTS.CSBPIPE;
        
        
        ADDCOMMENTTOLINE(ICLDATA, SBLINE);
        
        
        SBLINE := SBLINE||GE_BOCONSTANTS.CSBPIPE;

        
        SBLINE := SBLINE||DTINITEXCDATE||GE_BOCONSTANTS.CSBSEMICOLON||DENDEXCDATE;
        
        
        ADDINSPECTIONTOLINE(ICLDATA, SBLINE, NUORDERID);
        
        
        UT_LOB.PRINTCLOBOUT(SBLINE);

        
        CLOSEORDER(SBLINE, DTINITEXCDATE, DENDEXCDATE);

        UT_TRACE.TRACE('END CloseOrderByXML.CloseOrderByXML', 10);

    EXCEPTION
    	WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - CloseOrderByXML.CloseOrderByXML', 10);
            RAISE EX.CONTROLLED_ERROR;
    	WHEN OTHERS THEN
            UT_TRACE.TRACE('others - CloseOrderByXML.CloseOrderByXML', 10);
            ERRORS.SETERROR;
    		RAISE EX.CONTROLLED_ERROR;
    END CLOSEORDERBYXML;
    
    














    PROCEDURE INITIALIZEOUTPUT
    (
      ONUERRORCODE      OUT   GE_ERROR_LOG.ERROR_LOG_ID%TYPE,
      OSBERRORMESSAGE   OUT   NOCOPY GE_ERROR_LOG.DESCRIPTION%TYPE
    )
    IS
    BEGIN
         UT_TRACE.TRACE('BEGIN - OR_BOCLOSEORDERBYXML.InitializeOutput', 10);

         
	     ONUERRORCODE    := GE_BOCONSTANTS.CNUSUCCESS;
	     OSBERRORMESSAGE := GE_BOCONSTANTS.CSBNULLSB;

         UT_TRACE.TRACE('END - OR_BOCLOSEORDERBYXML.InitializeOutput', 10);
    EXCEPTION
        WHEN EX.CONTROLLED_ERROR THEN
            UT_TRACE.TRACE('ex.CONTROLLED_ERROR - OR_BOCLOSEORDERBYXML.InitializeOutput', 10);
            RAISE EX.CONTROLLED_ERROR;
        WHEN OTHERS THEN
            UT_TRACE.TRACE('others - OR_BOCLOSEORDERBYXML.InitializeOutput', 10);
            ERRORS.SETERROR;
            RAISE EX.CONTROLLED_ERROR;
    END INITIALIZEOUTPUT;

END OR_BOCLOSEORDERBYXML;